apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'

//group = "com.bitdubai.fermat.osa"
sourceCompatibility = 1.7
version = '1.0.0'

android {

    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            debuggable true
            testCoverageEnabled = true
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.+'
    compile 'com.android.support:support-v13:21.+'
    compile 'com.android.support:support-v4:21.+'
    compile project(':fermat-api')

    testCompile 'org.robolectric:robolectric:3.0-rc3'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
    testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'
}

pmd {
    toolVersion = '5.1.3'
}

tasks.withType (FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

def coverageSourceDirs = [
        'src/main/java'
]
def jacocoHtmlReport = ""


task jacocoTestReport(type:JacocoReport, dependsOn: [assemble, "testDebug"]) {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
        jacocoHtmlReport = "Code Coverage HTML Report: file://" + html.destination + "/index.html"
    }
}

task testCoverage(dependsOn: jacocoTestReport) << {
    println jacocoHtmlReport
}

tasks.assemble.dependsOn clean
tasks.assemble.mustRunAfter clean