apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
version = '1.0.0'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            debuggable true
            testCoverageEnabled = true
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':fermat-api')
    compile project(':fermat-osa-addon-android-database-system-bitdubai')
    compile project(':fermat-osa-addon-android-file-system-bitdubai')
    compile project(':fermat-osa-addon-android-device-location-bitdubai')
    compile project(':fermat-osa-addon-android-logger-bitdubai')

    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:support-v13:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'

    testCompile 'org.robolectric:robolectric:3.0+'
    testCompile 'junit:junit:4.11+'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile 'com.googlecode.catch-exception:catch-exception:1.2.0'
    compile 'com.android.support:design:23.1.0'
}

// Configuracion de PMD
pmd {
    toolVersion = '5.1.3'
}

// Configuracion de FindBugs
tasks.withType (FindBugs) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// Configuracion de JaCoCo
def coverageSourceDirs = [
        'src/main/java'
]

def jacocoHtmlReport = ""

task jacocoTestReport(type:JacocoReport, dependsOn: [assemble, "testDebug"]) {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
        jacocoHtmlReport = "Code Coverage HTML Report: file://" + html.destination + "/index.html"
    }
}

task testCoverage(dependsOn: jacocoTestReport) << {
    println jacocoHtmlReport
}

tasks.assemble.dependsOn clean
tasks.assemble.mustRunAfter clean


