apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group = "com.bitdubai.fermat.p2p"
sourceCompatibility = 1.7
version = '1.2.0'

configurations {
    deployerJars
}

jar {
    manifest {
        attributes 'Implementation-Title': 'fermat-p2p-plugin-communication-wifi-bitdubai',
                   'Implementation-Version': version
    }
}

repositories {
	mavenCentral()
	maven {
		url "https://repository-fermat.forge.cloudbees.com/release/"
		credentials {
			username 'bitdubai.repo'
			password 'bud@pestdcd16c'
		}
	}
}

dependencies {
	compile project (':fermat-api')
	compile 'com.google.code.gson:gson:2.3.1'
	testCompile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
	testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'

	deployerJars "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"	
}

pmd {
	toolVersion = '5.1.3'
}

test {
	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running test: " + descriptor)
	}
	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
}

uploadArchives {
                
    repositories {
   
        flatDir {
            
            dirs 'repos'
        }

	mavenDeployer {
            configuration = configurations.deployerJars
            repository (url: "dav:https://repository-fermat.forge.cloudbees.com/release/") {
                authentication(userName: 'raul-pena', password: 'bAvE19G77_')
            }
        }
    }
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task jenkins(dependsOn: ['clean', 'check', 'jacocoTestReport']) << {
	println 'Estos son los chequeos que se tienen que pasar antes de hacer push al servidor Jenkins'
}
check.mustRunAfter clean
jacocoTestReport.mustRunAfter check
