package com.bitdubai.fermat_api.layer.all_definition.transaction_transference_protocol.crypto_transactions;

import java.util.UUID;

/**
 * The class <code>com.bitdubai.fermat_api.layer.all_definition.transaction_transference_protocol.crypto_transactions.FermatCryptoTransaction</code>
 * provides the methods to obtain the meta data associated to a crypto transaction.
 *
 * @author Ezequiel Postan
 */
public class FermatCryptoTransaction {

    private boolean isAnswerToAPaymentRequest;
    private UUID requestID;
    private String senderPublicKey;
    private String destinationPublicKey;
    private String associatedCryptoTransactionHash;
    private String paymentDescription;

    public FermatCryptoTransaction(boolean isAnswerToAPaymentRequest,
                                   UUID requestID,
                                   String senderPublicKey,
                                   String destinationPublicKey,
                                   String associatedCryptoTransactionHash,
                                   String paymentDescription) {

        this.isAnswerToAPaymentRequest       = isAnswerToAPaymentRequest;
        this.requestID                       = requestID;
        this.senderPublicKey                 = senderPublicKey;
        this.destinationPublicKey            = destinationPublicKey;
        this.associatedCryptoTransactionHash = associatedCryptoTransactionHash;
        this.paymentDescription              = paymentDescription;
    }



    /**
     *
     * @return true if it is the transaction generated by a payment request. Otherwise returns false
     */
    public boolean isAnswerToAPaymentRequest(){
        return isAnswerToAPaymentRequest;
    };

    /**
     *
     * @return the identifier of the payment request (if any)
     */
    public UUID getRequestId() {
        return requestID;
    };

    /**
     *
     * @return the public key of the identity sending the payment
     */
    public String getSenderPublicKey() {
        return senderPublicKey;
    };

    /**
     *
     * @return the public key of the identity receiving the payment
     */
    public String getDestinationPublicKey() {
        return destinationPublicKey;
    };

    /**
     *
     * @return the hash of the crypto transaction that carries the actual value of this transaction
     */
    public String getAssociatedCryptoTransactionHash() {
        return associatedCryptoTransactionHash;
    };

    /**
     *
     * @return a description of the transaction
     */
    public String getPaymentDescription() {
        return paymentDescription;
    };
}