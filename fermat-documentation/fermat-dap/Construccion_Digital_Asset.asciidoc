Ante la idea de mandar a firmar algo a alguien para comprobar que tiene las cosas que dice tener 
falla porque el que intenta falsificar la identidad del portador simplemente le pide al verdadero 
portador lo que le pidieron a él firmar.

== Definiciones

Un Digital Asset (DA) es un conjunto de metadata asociada a un transaccion bitcoin.

Cuando transmitimos un asset debemos enviar una transacción bitcoin y la metadata al destinatario.
La transacción bitcoin viaja a través de la red bitcoin mientras que la metadata viaja a través de
los canales de comunicación de Fermat. +

En principio, los digital assets comparten las siguientes características:

* Tienen un Emisor, que es alguno de los actores del sistema.
* Tienen una fecha de expiración. (aunque en algunos casos puede ser que no expiren nunca)
* Tienen uno o mas elementos multi-media (imagen, sonido, video, animación, etc.) destinados a
  representar ante el usuario final dicho asset.
* Son de un determinado tipo.
* Tienen una lista de condiciones que dependen de su tipo. (Las entienden cualquier wallet que maneje
  ese tipo de Assets)
* Son de un determinado sub-tipo.
* Tienen una lista de condiciones que dependen de su sub-tipo. (Las entienden cualquier wallet que
  maneje ese sub-tipo de Assets)
* Tienen una lista de condiciones que dependen de su emisor. (Solo las entienden las wallets del emisor)

A la lista de condiciones que aplican sobre un asset, le vamos a llamar Asset Contract.

A toda la información que representa al asset, le vamos a llamar Digital Asset (DA).

A la transacción que se usa para generar el asset la llamaremos genesis transactión.

== Hipótesis

El usuario que recibe un asset conoce la clave pública del creador del asset.

== Creación

Si un actor desea crear un DA comenzará creando la metadata, posteriormnete se calculará en función
a los montos necesarios para cumplir con lo que el asset requiere el hash de la transacción que se
va a usar para crear el asset. +
Agregaremos entonces a la metadata del asset este hash y dejaremos como información adjunta a la
transacción que publicaremos la firma de la metadata. +

Debemos definir con mayor precisión la metadata que compone al asset y también la forma de uso del
mismo. Esto dependerá de los problemas que querramos atacar. Para esta etapa inicial nos concentramos
en construir assets que tras ser emitido sólo pueden ser transferidos de su emisor a un destinatario
sin alteraciones y luego de este portador nuevamente se transfiere al emisor original. Este tipo de
asset simula el comportamiento de un coupon no transferible. +

Para implementar las restricciones como las del primer caso parece ser suficiente con que en la
metadata que se coloca en la transacción bitcoin se incluya el dato de saltos máximo que el asset
puede realizar. +

Al realizar un salto el receptor debe (al recibir la metadata y la transacción crypto asociada):
* Obtener el camino entre la transacción que recibimos y la genesis transaction del asset
* Verificar que ese camino no tiene difurcaciones
* Verificar que dentro de la metadata del asset figure el hash de la genesis transaction.
* Verificar que en la información que publicó la genesis transaction en el blockchain coincida
  la firma con la metadata y el public key del creador del asset.

La información indispensable para colocar en la metadata es el hash de la transacción asociada.

== Posibles ataques

Analicemos posibles ataques a nuestro planteo para falsificar DA.

* Copiar en otra transacción la firma de un asset existente: No tendría la metadata
* Copiar la metadata (cambiar el hash de la genesis transaction asociada) y firmar con otra firma
  para crear una nueva genesis transaction: Por un lado, no va a coincidir la firma por no usarse el
  public key del hipotético creador del asset pero además
  el hash de la metadata.
* Tras recibir un asset si se intenta duplicar creando otra genesis transaction sin modificar la
  metadata y sin modificar la información que adjuntamos a la transacción bitcoin entonces no va a
  coincidir el transaction hash de la metadata con el de la genesis transaction del asset.
* Por otro lado si tras recibir un asset si se intenta duplicar creando otra genesis transaction pero
  esta vez se modifica la metadata para que aparezca el hash de la genesis transaction falsa entonces
  al colocar la firma de la metadata en la transacción bitcoin se va a dar el caso de que no va a
  poder verificarse al usar el public key del emisor original.

=== Otros ataques

Intentar atacar el canal por el cual se obtiene la clave pública del creador del asset.

== Otros desafíos

Queremos poder verificar que un asset que se nos ofrece es válido antes de su traspaso:: Esto requiere
que el receptor (o inspector) pueda conocer la transacción a través de la cual le llegó al usuario
que ofrece el asset, pero esta información depende del emisor por lo que no es confiable para verificar
validez. A nivel técnico hoy no tenemos solución aparente a este problema por lo que debemos investigar
más a fondo. Si bien no es parte de nuestra meta inicial debemos considerar este asunto. +


Queremos que el asset se pueda pasar de un usuario a otro:: Esto requiere pensar en quién pagará los
fees de las transacciones.
** Una opción es que el emisor del asset decida cuantas veces puede cambiar
de portador dicho asset (esto puede tener sentido al manejar cupones o descuentos si el emisor no
quiere que haya un mercado de reventa)
** Otra opción es que no haya límites de saltos (cambios de portador), para lo cual hay que pensar
en el pago de las fees de las transacciones.


