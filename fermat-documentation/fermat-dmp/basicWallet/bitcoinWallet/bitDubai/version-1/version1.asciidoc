[[BasicWallet-BitcoinWallet-BitDubai-V1]]
= Version 1

== Plug-in Description

Como las demás wallets de la capa de Basic Wallet, este plugin lleva el balance de su niche wallet asociada. +
En este caso el balance puede fragmentarse en dos conceptos:

* Available Balance: Es la cantidad de bitcoins que el usuario tiene disponible en el momento para
manipular (gastar).
* Book Balance: Es la cantidad de bitcoins que están siendo manejadas por la wallet.

El book balance puede diferir temporalmente del available balance. Por ejemplo, cuando llegan bitcoins a
una wallet, la red bitcoin nos avisa de la llegada de crypto currency apenas se ve en la red una
transacción que se dirige a nuestra wallet. Sin embargo, hasta que la transacción no entra en un bloque
no tenemos forma de utilizar estos bitcoins. Queremos que el usuario pueda ver que la transacción se está
procesando por la red y actualizarle su balance, pero al mismo tiempo queremos impedir que pueda gastarlo. +
El procedimiento para este tipo de situación en un sistema contable es registrar en el book balance estos bitcoins
detectados que aún no se confirmaron y luego de que entren en un bloque sean ingresados al available balance. +
En el período de tiempo entre que se identifica la transacción entrante y se confirma por la red, tendremos que el
book balance tendrá más bitcoins que el available balance. +
Otro ejemplo sobre las situaciones en que estos dos balances difieren es al momento de hacer un débito. +
Cuando enviamos un débito, este será descontado del available balance y no se descontará del book balance hasta que
no se confirme el envío exitoso de la transacción. +

Por lo tanto, esta wallet deberá permitirnos manejar créditos (ingresos), débitos (egresos) y consultas de balance
de ambos tipos de balances. +

A nivel del sistema, la modificación al book balance y la modificación al available balance son dos
transacciones distintas. La wallet deberá llevar una lista de todas las transacciones que se realizan
(sean del book balance o del availbable balance). +

Notemos entonces que como vamos a tener una tabla de transacciones, requeriremos que la clave primaria
de la misma ya no sea el hash de la transacción bitcoin asociada, sino un UUID diferente. +
Analicemos esto con un ejemplo:

Una transacción entrante es detectada por el módulo de la red bitcoin, los módulos transaccionales
son notificados por la red y aplican en el book balance la transacción correspondiente asociada
a esta transacción bitcoin entrante. +
Unos minutos más tarde, llega un aviso de la red bitcoin comunicando que la transacción fue confirmada,
por lo que los módulos transaccionales aplican en el available balance la actualización correspondiente. +
Notemos que en la tabla de las transacciones se ingresarán dos registros para la misma transacción bitcoin,
el que registró la identificación de la transacción y el que refistró su confirmación. +
Ambas transacciones (de fermat, es decir, registros de la tabla de transacciones de la bitcoin wallet)
están asociadas a la misma transacción bitcoin, es por esto que no podemos usar el hash de la transacción
bitcoin como clave primaria de la tabla de transacciones.

Por cuestiones de optimización queremos que el cálculo de ambos balances se lleve en una tabla de la
base de datos del plugin. Esta tabla tendrá dos columnas, una para el Book Balance y otra para el
Available Balance. +
Cuando se haga un débito/crédito en alguno de los balances se restará/sumará el monto a estos valores
que están en la tabla. La tabla siempre tendrőa un őunico registro +

Por otro lado, en la tabla de transacciones, queremos llevar dos valores de información más. Estos valores
serán el Running Book Balance y el Running Available Balance, los cuales registran los balances acumulados
hasta el momento de la transacción. +
Por ejemplo, si teníamos 2 BTC en el Book Balance y la misma cantidad en el Available Balance y se ejecuta
el método de credit sobre el Book Balance registrando el ingreso de 1 BTC tendremos que en el campo de Running
Book Balance figurarán 3 BTC mientras que en el de Running Available Balance dirá 2 BTC. +
Si luego entra otra transacción al Book Balance de 2 BTC, se ingresará la nueva transacción con valores de
Running Book Balance de 5 BTC y el Running Available Balance seguirá siendo de 2 BTC. +
Cuando se ejecute el credit del Available Balance para alguna de estas transacciones, se ingresara una
treansaccion que tendrá como Running Book Balance el Book Balance actual y como Available Book Balance
el Available Book Balance actual más el monto de la transacción crypto asociada. +

== Plug-in Structure

La estructura de este plugin seguirá la estructura de nuestra descripción. +

* El plugin root tendrá un método que retorna una Bitcoin Wallet a partir de un Id.
* La bitcoin wallet tendrá un método que retorne las transacciones, este tendrá dos parámetros, el
offset y la cantidad máxima de transacciones que se desean traer. Además deberá tener un método que
retorne un objeto que permita hacer el débito, crédito y consulta de balance del Book Balance y otro
método que retorne un objeto con igual interfaz pero que realice las operaciones sobre el Available
Balance. +
* Los objetos que manipulan el Available y Book Balance actuarán sobre un objeto intermedio que será
quién administre las tablas de la base de datos. +

== Events

Al actualizar satisfactoriamente los balances debemos informar al sistema que hubo una actualización
de los mismos, para ello dispararemos dos eventos. +

BitcoinWalletAvailableBalanceChangedEvent;; Este evebto debe lanzarse cuando el Available Balance es
alterado tras una operación de crédito o débito.
BitcoinWalletBookBalanceChangedEvent:: Este evento debe lanzarse cuando el Book Balance es alterado
tras una operación de crédito o débito.


== Implementation Details

Cuando llega una transacción a aplicar debemos registrar la misma en la tabla de transacciones. +
Para completar los campos de la tabla debemos calcular el Running Book Balance y el Available Book
Balance, lo cual involucra:

. Consultar el balance actual.
. Dependiendo si es un crédito en el Book o Available Balance, sumar al campo del Running Balance
correspondiente el monto de la transacción.
. Actualizar el balance actual.

Esto trae un problema que ilustraremos con el siguiente ejemplo:

Supongamos que el balance actual del es 2 BTC de Book Balance y también 2 BTC del Available Balance.
Usermos la notación de pares ordenados (Book Balance, Available Balance) para simplificar la notación.
Es decir, que tenemos un balance (2,2). +
Supongamos que un thread pide hacer un crédito de 1 BTC al Book Balance. Lo intuitivo es que el thread que
ejecute el primer crédito registrará una transacción con Running Book Balance de 3 BTC y balance (3,2), mientras
que el segundo thread dejará un Running Book Balance de 4 BTC y un balance de (4,2). Sin embargo, podría
darse la siguiente secuencia:

. El primer thread llama al credit. Lee que el balance es (2,2)
. Antes de que el primer thread complete su operación de actualizar el balance, el segundo thread llama
al método de credit y también lee un balance de (2,2).
. El primer thread actualiza las tablas y coloca que su Running Book Balance es de (3,2), es decir,
el balance que leyó más 1 BTC que era el monto de la transacción.
. El segundo thread también actualiza las tablas y como leyó un balance (2,2) también coloca una transacción
con Running Book Balance de 3 BTC y balance (3,2)

Como vemos se pierde una transacción en los balances. +
Vamos a necesitar que se puedan realizar estas actualizaciones de manera transaccional por lo que
debemos realizar cambios al plugin de base de datos. Posiblemente lo más adecuado sea poder hacer una
lectura dentro de una transacción así como se realizan updates e inserciones. +