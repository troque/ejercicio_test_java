[[BasicWallet-DiscountWallet-BitDubai-V1]]
= Version 1

== Plug-in Description

The main purpose of this plug-in is to provide an abstraction that let
the user manipulate fiat money. +
The important aspect is that in reality this plug-in is managing the
value in a crypto currency. This means that the user will always see his
money in his local country currency being totally transparent to him the
crypto currency representation.

== Main Problems the Plug-in deals with

The implementation of this kind of abstraction carry many technical
problems which we will discuss in this section. +
We will explain the factors involved and in the next sections we will
present the way the plug-in deals with this considerations. For
simplicity from now on we will assume that our local currency are USD
(US Dollars) and the crypto currency involved is BTC (Bitcoins).

* *Exchange rate fluctuation* +
When dealing with different currencies we have an exchange rate involved
that varies from day to day. This characteristic is no stranger to
crypto currencies. +
With this consideration in mind, suppose that the user deposits in his
Discount Wallet 100 dollars and that the Bitcoin/Dollar exchange rate is
1BTC per 100USD. This means that the wallet internally will have a value
of 1 BTC and the user will see that he has 100 USD. +
Now, how should we act if the next day the Bitcoin/Dollar rate is:
** 1 BTC per 50 USD. This would mean that the value inside the wallet is
now 50 USD (and not the 100 USD the user deposited and still assumes he
has).
** 1 BTC per 200 USD. This would mean that the value inside the wallet
is now 200 USD (and not the 100 USD the user deposited and still assumes
he has).
* *Deposits with different exchange rates* +
How should we act if the user deposits money in the discount wallet in
several moments at different exchange rates?
* *Extractions* +
Imagine the user deposited 100USD at a rate of 1BTC per 100USD and then
deposited another 100USD but now with a rate of 1BTC per 50USD. If the
user then wants to extract 200USD from his discount wallet, how should
we respond?

== Plug-in's Business Logic

Let's answer to the questions pointed before. For convenience we will
answer the second one first.

* *Deposits with different exchange rates* +
We will manage this by saving the information of the exchange rate
associated to every deposit made with two tables. The first table will
deal with the registration of the credits (we will use the word credit
as synonym of deposit). This table will have a reference to what we will
call a *value chunk*. A value chunk is a record that tell us (between a
few other things):
** The amount of fiat currency deposited by the credit operation.
** The equivalent in crypto currency amount at that moment (this crypto
amount is what we saved as value, the fiat amount is kept as reference
of the exchange rate).
** The state of the value chunk, at the moment of the credit it will be
created as UNSPENT. This field can also be SPENT or FATHER (we explained
their uses later)
+
So, initially every credit record in the Credits table will have a value
chunk assign in the ValueChunk table.
+
Now lets see how we use this information to treat the other issues.
* *Exchange rate fluctuation* +
The idea is to show the user two amounts of money, one called *balance
of the wallet* and the other called *available amount* both measured in
fiat currency units. +
The *balance of the wallet* (or simply *balance*) is calculated as the
sum of fiat money the user has deposited minus the sum of what he has
spent (always in fiat currency units). +
The *available amount* will represent what the user can safely spend and
its calculation is the core of this plug-ins business logic. +
Lets make some more precise definitions in order to define this
amount.
+
As we explained before, we have records saved with the information about
every deposit made. The value chunks have the information about the
crypto currency amounts we have deposited, the amount of fiat
currency we used to get that crypto and a state field. +
Then, we can represent a value chunk with a tuple (_fa_,_ca_,_s_) where _fa_ is the
fiat currency amount registered in the record, _ca_ is the crypto
currency amount registered in the record and _s_ is the current state of
the record. We are ignoring other data in the representation for the
purpose of the explanation.
+
Now, let (fa_1 , ca_1 , s_1), ... ,(fa_n , ca_n , s_n) be all the value
chunks and let currentFiatAmount be a function that tells us the
equivalent fiat amount of money represented by the crypto amount we give
it as parameter. +
If the current rate is 1BTC per 100USD then
currentFiatAount(1) is equal to 100. You can see that at the moment of
the creation of a value chunk (_fa_,_ca_) it holds that
currentFiatAmount(_ca_) = _fa_.
+
So, with this definitions made we can define with precision the balance
and available amount as follow: +

** balance is the sum of all the fa_i that correspond to the value
chunks with state UNSPENT.
** available amount will be the *minimum between* balance and the sum of
currentFiatAmount(ca_i) for the unspent chunks created with an exchange
rate below the current one, i.e. the values chunks where it holds that
currentFiatAmount(ca_i) >= fa_1 and also s = UNSPENT. +
*The user will never see an available amount superior to the balance he
has* (this is a convention we took in this wallet, this could change in
other kind of wallets).
+
Let's see this with some examples: +

*** *Example 1:* +
Suppose you deposited 100USD in your Discount Wallet and that the
exchange rate at that moment was 1BTC per 100USD. In this situation you
will see that balance = available amount = 100USD and as a user you
won't see you have really 1BTC. +
There will be one record in the Credits table and a value chunk
(100USD,1BTC,UNSPENT) in the ValueChunk table. +
Now imagine that the
exchange rate change to 1BTC per 50USD. Under this new situation you
will see balance = 100USD and an available amount of 0USD, because there
is only one ValueChunk and 50 = currentFiatAmount(1) < 100. +
 Finally imagine that the new exchange rate is 1BTC per 200USD, Under
this situation you will see again that balance = available amount =
100USD.
*** *Example 2:* +
 Suppose you make two separate credits of 100USD at a rate of 1BTC per
200USD. +
 We will see balance = available amount = 200USD. Also two records in
the Credits record and two value chunks like (100USD,0.5BTC,UNSPENT). +
 Now imagine the rate drops to 1BTC per 50USD. In this situation balance = 200USD and the available amount is 0USD. +
 At this point, suppose we deposit another 100USD, this will add a
record to the Credits table an the value chunk (100USD, 2BTC,UNSPENT) to
the ValueChunks table. The refresh balance would be 300USD and the
available amount would be just 100USD. +
 Finally imagine that the rate raise up to 1BTC per 100USD. The only
chunk with currentFiatAmount(ca) >= fa is the last chunk we added. So
the balance is still 300 and the available amount would be
currentFiatAmount(2) which in this case is 200USD. +

* *Extractions* +
So, our last issue deals with the way we will manage the information we
have in respect to the debits of this wallet (we will use debit as a
synonym of extraction). +
If the user wants to spend a fiat amount of money, say N, we check two conditions. First we check if N >= 0 and then if available amount >= N. +
If this conditions hold we add a record to a Debits table similar to the
one described for Credits table. +
Now, as we have saved crypto currency as value and the user wants to
spend fiat currency the big questions are: +
[start=1]
.  how much do we subtract to the available amount and to the balance? +
Remember that the exchange rate of the currencies changes with time and
some chunks where created at a lower rate than the actual. + 
This means that we bought the crypto currency at a value and now this crypto amount
represent more fiat money that what we paid initially. +
For example, if you deposited 100USD at a rate of 1BTC per 100USD and
the exchange raise to 1BTC per 200USD you will see a balance and
available amount of 100USD, but the value inside the wallet is 1BTC
which is at the moment equivalent to 200USD. +
Under the logic of this wallet if you try to spend 100USD you will be
notified at the moment of paying that you have a discount of 50USD in
this case. +
This discount is possible because you can pay the purchase using 0.5BTC (equivalent to 100USD now but obtained at a price of 50USD). Then, the discount will be
getCurrentFiatAmout(0.5) - oldFiatValue(0.5), where oldFiatValue tells
you the equivalent amount of fiat currency that its parameter represent
using the exchange rate of the value chunk (this may be a different rate
than the actual rate as happens in this example).
We would keep a value of 0.5BTC which still represent the remaining original 50USD. The user don't need to know this internal mechanism but can benefit from it. +
*NOTE:* One good question is, why the user does not get a discount of
100USD instead of 50USD? This will be answered in the next paragraphs. +
.  The second question is how do we manage the value chunks to keep the
integrity of the ValueChunks, Debits and Credits tables and be able to
apply this strategy of discounts? +
In the example explained before the value chunk stored of (100USD,
1BTC, UNSPENT) must be changed. We will do this by changing it state to
FATHER and therefore keep in the ValueChunks table the record (100USD,
1BTC, FATHER) representing that it was partially spent and we will also
add two new (children) records. One of the children will be (50USD,
0.5BTC, SPENT) representing the fraction of the original chunk used to
pay the debit. For the other chunk we have two options:
** One is to store (50,0.5,UNSPENT) representing the money kept. In this
case, note that the chunk fiat amount is equivalent to the crypto amount
calculated at the *original father value chunk rate* and not the actual
rate. This would be intuitively thought as if we have just extracted the
100USD needed to pay (using 0.5BTC underneath) and kept the rest without
touching it. +
** As an alternative, we could store as second child value chunk
(100,0.5,UNSPENT), i.e. calculating the fiat amount at the *actual
exchange rate* instead of the father's original rate. We can think this
intuitively as if we have extracted the 200USD of value we had, then
paid the 100USD needed and then deposited back the remaining 100USD at
the actual exchange rate.
+
The difference of this two strategies is:

*** In the second strategy, you will have an apparent higher discount
(because you will have 100USD to add to the balance instead of just
50USD coming from the UNSPENT child chunk), you will also see an
available amount of 100USD instead of 50USD. +
The disadvantage is that if the exchange rate goes down, say to 1BTC per
150USD, the value chunk will not be available until the rate go back to
1BTC per 200USD or higher.
*** In the first approach (the one we followed in this implementation)
the value chunk will be available for the case of the rate going down to
1BTC per 150USD. So you still can have a discount in the future with the
chunk. The main advantage is that at this rate you will have this chunk
available for a debit. +
The disadvantage is that the discount will probably be lower and the
lower balance of the wallet will restrict the available amount to spend.
+
Our conclusion is that real day to day use should provide the
information to decide which approach is the best. For now, we will take
the one described first.

So, let's try to formalize the algorithm to implement this logic. We need
to calculate the discount and to modify the ValueChunks table to reflect
the debit in the way explained answering the question 2.

Lets begin as usual with some definitions used in the algorithm:

* amount to spend: N +
* actual value chunk being analysed: vc, we will use the notation that
vc is the tuple (fa,ca,state) where:
** fa is the fiat amount of the value chunk +
** ca is the crypto amount of the value chunk +
** state is the state of the value chunk +
* The discount acumulated: discount (initialy set to 0)
* getCurrentFiatAmount: a function that given a crypto amount of
currency it returns the equivalent fiat amount at *the current* exchange
rate.
* getCurrentCryptoAmount: a function that given a fiat amount of
currency it returns the equivalent crypto amount at *the current*
exchange rate.
* oldFiatValue: a funtion that given a crypto amount of currency, it
returns the equivalent fiat amount calculated at the *original father
chunk exchange rate*
+

//^

Now we can write the algorithm

1. Check that N >= 0, if not we end the execution with an error message
2. Check that the available amount >= N, if not end the execution with
an error message
3. Take the chunks from the ValueChunks table with state UNSPENT and
store them in a list.
4. Sort the chunks of the list putting the chunks generated at lower
exchange rate at the beginning of the list. The exchange rate of a chunk
(fa,ca,state) is equal to the quotient fa/ca.
5. Now iterate over this sorted list until you N is 0 (this condition
will eventually hold because of the steps 1 and 2). Inside this loop
proceed as follow:

---------------------------------------------------------------------------------------
         if(N >= getCurrentFiatAmount(ca))
             N = N - getCurrentFiatAmount(ca)
             discount = discount + (getCurrentFiatAmount(ca) - fa)
             vc = (fa,ca,SPENT) // vc state is updated to SPENT 
         else
             let
                  ca1 = getCurrentCryptoAmount(N)
                  ca2 = ca - ca1
                  fa1 = oldFiatValue(ca1) // the amount represented by ca1
                                          // calculated at the original father's rate
                  fa2 = oldFiatValue(ca2) // the amount represented by ca2 
                                          // calculated at the original father's rate
             in
                  vc = (fa,ca,FATHER) // vc state is updated to PARENT
                  
                  // We add two new value chunks vc1 and vc2 
                  // to the ValueChunks table (the children of vc)
                  vc1 = (fa1 , ca1 , SPENT)
                  vc2 = (fa2 , ca2 , UNSPENT)
                  discount = discount + (getCurrentFiatAmount(ca1) - oldFiatValue(ca1))
                  N = 0
             end // end of let
         end // end of if-else
---------------------------------------------------------------------------------------

Here we finished the explanation behind the business logic of this
module. The rest of this document talks about the source code structure
and implementation issues. During this explanation we have simplified
some details to make the ideas clearer. Some of this details that we
should remark are:

* The crypto currency can be different from Bitcoin, but a single wallet
will work with only one type of crypto currency from the beginning of it
existence to the end.
* The same observation holds for fiat currency. A wallet can use other
currencies different than the US dollar but it will manage only one kind
of fiat currency.
* The fiat and crypto currency amounts are represented in long integers
to avoid trouble with the precision of floating point representation.
For example, 1 USD is stored as 1000 thousandths of a dollar, and 1BTC
is stored as 100.000.000 units called satoshis. In this way we avoid
dealing with decimals in many (but unfortunately not all) calculations.
* The tables described (Credits, Debits and ValueChunks tables) have a
few more data than mentioned.
* The functions presented for conversions between fiat and crypto
currencies have more parameters than explained and slightly different
names too.
* In the actual implementation the conversions will probably bring
decimals to the currencies representations. This must be treated with
care. So we will see in the actual code conversion functions that round
decimals up and down applied depending on the convenience of the
situation. The next section will explain those decisions and some
improvement to the implementation of this algorithm. The rule of thumb
to follow in this module is: No matter what is the problem, *always keep
a consistent relation between the balance, available amount and internal
information stored in the wallet*. +
For more information about the conversions functions see their
documentation in the Definitions Layer

== Implementation Notes

In this section we try to explain how we can refine the specification
given on the previous section and treat some of its problems. +
The main problem to notice is that in the case of a debit, we will have
to update the ValueChunks table. If we consume an entire value chunk it
does not bring any apparent problem (we just need to mark the chunk as
SPENT). But, there is a possibility that we may need to spend only part
of a chunk and that will bring the creation of two new value chunks. The
problem with this is that in our implementation for a chunk (fa,ca,s) we
have fa and ca (the fiat amount and crypto amount of the chunk
respectively) represented as long integers, but despite the conversion
functions (getCurrentFiatAmount, oldFiatValue, etc.) will give us a long
integer, that integer will be an approximation of the real value (i.e.
the long will possibly lose the decimals of the real result of the
conversion).

This means that we will probably need to deal on how to manage those
decimal "lost". Lets attack this problem.

In the implementation we have as a parameter the crypto amount that is
the equivalent to N, lets call it cryptoToPay. A good idea would be to
reduce (or eliminate) the application of this error problematic methods,
lets see if we can use cryptoToPay to achieve this goal.

In the first branch of the if statement we have three uses of
getCurrentFiatAmount.

------------------------------------------------------------------
         if(N >= getCurrentFiatAmount(ca))
             N = N - getCurrentFiatAmount(ca)
             discount = discount + (getCurrentFiatAmount(ca) - fa)
             vc = (fa,ca,SPENT) // vc state is updated to SPENT 
------------------------------------------------------------------

We need a long integer in the three appearances of the function. First,
We can replace the if condition N >= getCurrentFiatAmount(ca) with the
precise one cryptoToPay >= ca.

Now we could round down the other two numbers. This would imply that we
will tell the user that the discount was lower than what it really was,
although this does not harm the integrity of the information stored it
is not the best solution and also bring other issues like problems with
the else branch of this if statement. +
So, the better solution is to not only stop accumulating the discount,
but also avoid subtracting to N an inaccurate amount (now the if
condition is based on cryptoToPay, so we don't need to modify N any
more). We will instead just add up the fiat amounts of the chunks used
to pay and simply calculate the discount as N - spent, where spent
represent the result of the said sum. With this modifications and adding
the line cryptoToPay = cryptoToPay - ca, the implementation version of
this branch will be

----------------------------------------------------------------
         if(cryptoToPay >= ca)
             cryptoToPay = cryptoToPay - ca
             spent = spent + fa
             vc = (fa,ca,SPENT) // vc state is updated to SPENT 
----------------------------------------------------------------

In the else branch of the if statement we will need more care.

---------------------------------------------------------------------------------------
         else
             let
                  ca1 = getCurrentCryptoAmount(N)
                  ca2 = ca - ca1
                  fa1 = oldFiatValue(ca1)
                  fa2 = oldFiatValue(ca2)
             in
                  vc = (fa,ca,FATHER) // vc state is updated to PARENT
                  // We add two new value chunks vc1 and vc2 
                  // to the ValueChunks table (the children of vc)
                  vc1 = (fa1 , ca1 , SPENT)
                  vc2 = (fa2 , ca2 , UNSPENT)
                  discount = discount + (getCurrentFiatAmount(ca1) - oldFiatValue(ca1))
                  N = 0
             end // end of let
---------------------------------------------------------------------------------------

* We can avoid using getCurrentCryptoAmount to calculate ca1 and simply
write ca1 = cryptoToPay. +
* The discount line can be deleted as mentioned before. +
* fa2 can be calculated as fa2 = fa - fa1.

So now we only have only one tricky method application instead of the
original 8. How should we deal with this one? If we round down the user
will see a higher discount and we will alter a little bit the exchange
rate of vc2. The opposite will happen if we round up the result of
oldFiatValue(ca1). In both cases the balance of the wallet will stay
consistent, so we choose to simply round down the number.

NOTE: This approach "simulates" that we have "created
money", and is important to think about this. The "real money" is what
has value, and the value in this wallet is the crypto currency (which we
haven't rounded, not even once). This extra amount of fiat money added
to the balance won't bring any problem because it won't be available to
spend until exchange rate increase proportionally in order to pay for
the increased amount, i.e. if we call the increased amount produced by
the rounding increasedAmount we have that the second child chunk vc2
ends up being (oldFiatValue(ca2) + increasedAmount , ca2 , UNSEPENT),
and to be considered as part of the available amount the exchange rate
needs to go up in order to satisfy getCurrentFiatAmount(ca2) >=
oldFiatValue(ca2) + increasedAmount, so the increasedAmount will be
covered by real value.

The final approach of the implementation will then be (steps 1 and 2 can
still use N):

1. Check that N >= 0, if not we end the execution with an error message
2. Check that the available amount >= N, if not end the execution with an error message
3. Take the chunks from the ValueChunks table with state UNSPENT and store them in a list.
4. Sort the chunks of the list putting the chunks generated at lower exchange rate at the beginning of the list. The exchange rate of a chunk (fa,ca,state) is equal to the quotient fa/ca.
5. Now iterate over this sorted list until you cryptoToPay is 0 (this condition will eventually hold because of the steps 1 and 2). Inside this loop proceed as follow:

----------------------------------------------------------------------
         if(cryptoToPay >= ca)
             cryptoToPay = cryptoToPay - ca
             spent = spent + fa
             vc = (fa,ca,SPENT) // vc state is updated to SPENT 
         else
             let
                  ca1 = cryptoToPay
                  ca2 = ca - ca1
                  fa1 = oldFiatValueRoundedDown(ca1)
                  fa2 = fa - fa1
             in
                  vc = (fa,ca,FATHER) // vc state is updated to PARENT
                  // We add two new value chunks vc1 and vc2 
                  // to the ValueChunks table (the children of vc)
                  vc1 = (fa1 , ca1 , SPENT)
                  vc2 = (fa2 , ca2 , UNSPENT)
                  cryptoToPay = 0
                  spent = spent + fa1
             end // end of let
----------------------------------------------------------------------

[start=6]
. Outside the loop, calculate the discount as 

--------------------------------
            discount = N - spent
--------------------------------


== Possible improvements and other considerations

1.  Notice that the only chunk that could be partially spent is the last
chunk used to pay the credit, i.e. the one where
+
N < getCurrentFiatAmount(ca) or more precisely cryptoToPay < ca
+
So, we would like to avoid or at least minimize the occurrence of this
situation. Under this idea, a good strategy would be that given a
deposit of an amount fa of fiat currency and its corresponding amount ca
of crypto currency, instead of storing one value chunk (fa,ca,UNSPENT)
we can add k chunks of the form (fa/k,ca/k,UNSPENT) where k = gcd(ca,fa)
(greatest common divisor of ca and fa).
2.  The last idea will put many "identical" chunks in the
ValueChunksTable. We can improve the representation by adding a field to
the chunk that tells the number of chunks with this values i.e. store
(fa/k, ca/k , UNSPENT , k) with k = gcd(ca,fa) instead of k chunks
(ca,fa,UNSPENT).
3.  We should consider the effect of reducing the size of the numbers
with strategies like the one described with respect to the rounding
errors brought by the conversion methods.
4.  We can implement the second alternative mentioned about how to
refresh the ValueChunksTable when we have to break a chunk to spend it.
We could even let an agent change the strategy dynamically.

== TODO and Other Notes

.Think
* ¿Cada cuanto se actualiza el index the intercambios?
* ¿qué hacer si entre la consulta sobre el descuento y la compra efectiva la tasa de cambio varía? Esto podría verse como algo raro en la Discount Wallet.
* En la actualización de las tablas al romper un chunk.
  Le coloco que el credit que creó a los hijos es el del padre o lo dejo null?
* Precios de compra y de venta, interfaz de CryptoIndexManager
* Qué significa el timestamp de un value chunk?
  Si es el momento de creación entonces hay que cambiar que en el debit que 
  implementé no se modifique el timestamp de los value chunks originales  



.TODO
* All the logic described here is already implemented.
* To finish the implementation we need to correct the pluginRoot, also
the databaseFactory (it should try to open the database before creating
it) 
