[[FermatDMP-CryptoTransactionLayer-IncomingCrypto-Bitdubai-1]]
= Incoming Crypto - Version 1

== Plug-in Description

Crypto networks use transactions to send value (crypto currency) from a user to another. We will use the term *crypto transaction* to refer to this kind of transactions. +
We will use the term *transaction* to refer to the duty of updating balances of wallets and volts to reflect the new value that arrived from the crpto transaction. +
It is clear that every crypto transaction produce a transaction. +

When new crypto transactions arrive to a wallet of the user logged in the device, one plug-in must update the corresponding wallet and crypto volt balances, i.e. apply the transaction. +
The plug-in that receive a crypto transaction is responsible of the associated transaction until it applies the said updates or it handles the transaction to another plug-in who knows how to manage it. +
The plug-ins that receive the crypto transaction (e.g. crypto networks and external wallets supported by the world layer) don't know how to apply the transactions and neither who is responsible of applying them. The purpose of this plug-in is then, to take the responsibility of the transactions from the initial plug-ins, decide what kind of plug-in should handle them and notify them trough an event so he can transfer this more specific plug-ins the responsbility of applying them. +

In other words, this plug-in works as a router. Its purpose is to listen to two events named IncomngCryptoReceivedEvent and IncomingCryptoReversedEvent from diferent sources.

* The IncomingCryptoReceivedEvent event informs that new transactions of crypto currency arrived to some wallet of the user logged in the device. +
* The IncomingCryptoReversedEvent event informs that a transaction that has been notfied has been reversed. +

Note that an IncomingCryptoReceivedEvent and a IncomingCryptoReversedEvent may be associated to the same crypto transaction but they produce two transactons (one to apply the crypto transaction and one to take back the changes). +
The plug-in must listen to this events, take the transactions from the source and take the responsability of giving this transactions to specialized plug-ins who know how to handle them. +

We need to implement a transaction transference protocol described in the <<Fermat-DMP-CryptoTransactionLayer,crypto transaction layer>>, and also a policy to inform the arrival of new transactions, so we will need to design a mechanism of syncronization to coordinate the system actions. +

== NOTAS (TO BE TRANSLATED, EDITED AND DELETED)




Cuando llega el dinero en este sistema distribuido, los dispositivos pueden estar prendidos o no. Además no sabemos si primero llega la información de la transacción o el valor de la misma.
Cuando llega primero el valor, no queda claro de quién proviene ni qué tipo de usuario lo envió (device,intra,extra user). Por eso este módulo existe, escucha eventos de crypto que llega y su misión es tomar pocesión de la transacción y luego pasársela a uno de los módulos más especializados (incoming-crypto-device, incoming-crypto-i BTC, incoming-crypto-extra).

Crypto network, billeteras externas

El mósulo recibe el evento, averigua su fuente y comienza una especie de protocolo para hacerse cargo de la transacción y luego avisarle a quien le envió el evento que ya tomó la posta y ahora se encarga él.

Si llega 1 BTC a la crypto network, cuando llega ese bitcoin el módulo de la crypto network asume que es responsable de ese valor. Entonces emite un evento que avisa que llegó ese dinero hasta que alguien tome el control de la transacción.

El incoming crypto escucha el evento, toma el control de la transacción, avisa a la crypto network que ya la tiene y la crypto network deja de enviar el evento por dicha transacción.

Todas las confirmaciones se hacen cuando las cosas se grabaron persistentemente, no cuando las toman en memoria.

Cosas similares se hacen para averiguar de qué tipo de usuario viene la transacción para pasarle la pocesión a ese módulo.

Los transaction managers los deben implementar también los módulos que lanzan estos eventos que informan transacciones. 

Cuando el módulo especializado en el tipo de usuario escucha el evento del incoming crypto y toma responsabilidad de la transacción. Luego aplica las acciones que sean necesarios para actualizar el estado de las billeteras y otros módulos para que reflejen la llegada de la transacción. +
Deben reflejarse los aspectos de información y valor. La información está en las wallets en general y el valor en la crypto volt (bóbeda)

.Eventos
* Identify: se ve una transacción en la red pero sin confirmaciones
* Received: la transacción obtiene la primer confirmación 
* ReceptionConfirmed: la transacción es totalmente confirmada (en bitcoin son 6 confirmaciones)
* Reversed: La transacción fue revertida

.IncommingCryptoRegister Table Fields
* Id: identificadr
* AddressTo: Dirección de destino de la transacción
* CryptoCurrency: Enum de la crypto
* CryptoAmount: Cantidad de crypto
* Source: Dirección de origen de la transacción
* Destination: Debe ser origen en realidad, intra/device/extra user para saber a quién avisar sobre la transacción
* CryptoStatus: Estado de la transacción en la red crypto
** IDENTiFY: Se ve la transacción en la red sin confirmaciones (no actuar)
** RECEIVED: Ve la transacción con una confirmación (hacer las actualizaciones)
** CONFIRMED: Ve la sexta confirmación
** REVERSED: Se revierte la transacción, es raro pero puede pasar (considerar como revertir las cosas)
* Status: Ciclo de vida del protocolo
** COLOCAR LOS ENUMS
* Timestamp: marca de tiempo

.IncomingCryptoEventsRecorded Table Fields
* Id
* Event
* Source
* Status
* Timestamp


=== AGENTES

Monitor: Procesa los eventos que registra en recorderService +
Se despierta periódicamente y mira si hay evento que le interese. +
Si hay eventos sobre los que deba actuar (¿con next pending event?, un confirmed por ejemplo) el agente procede a tomar la poseción de la transacción.

* La clase root inicializa los agentes y el eventRecorderService.
* El monitor se despierta, pide al registry el siguiente evento a tratar.
** Si tiene algo, busca el source del evento, se comunica por la interfaz del source para pedirle el registo de las transacciones y hace lo que corresponda. Al parece lo que corresponde es tomar la información de la transacción y avisarle al source que la capa de transacciones se va a hacer cargo desde ahora.
** Si no tiene eventos, se duerme de nuevo.
* El relay, le pide al registry las transacciones de las que la capa es responsable (las que recibe el monitor). Consulta si viene de un intra, extra o device user y manda un evento adecuado para que lo procece el módulo correspondiente (incoming crypto intra, incoming crypto extra, outgoing crypto intra, etc.).
