= Transaction Transference Protocol - Version 1

Date: May 6th 2015 +
Author: Ezequiel Postan <ezequiel_postan@hotmail.com>

Este protocolo involucra dos tipos de módulos T y R. Los tipo T transfieren la responsabilidad de transacciones que poseen y los tipo R reciben la responsabilidad de las transacciones. El tener la responsabilidad significa que deben realizar alguna tarea con la información de la transacción transmitida. +

IMPORTANT: Este protocolo asume que los módulos tipo R saben quienes son sus T asociados (quienes les transmiten transacciones). Los módulos tipo T no conocen la ideantidad de los R, sin embargo es posible que un módulo de tipo T deba clasificar transacciones y entregar distintos grupos a distintos receptores o dar la opción de dar distintos gruposa un mismo receptor. Presentaremos primero el caso de un sólo emisor y receptor y luego agregaremos leves adaptaciones para adaptarnos al caso más general. 

Sean T un módulo de tipo T y R un módulo de tipo R. 
Debemos considerar algunas cosas:

. T puede realizar otras acciones previas a inicar el traspaso de la transación.
. R puede realizar alguna tarea tras recibir la transacción.

Para tener esto en cuanta en los pasos del protocolo, a cada transacción se le agregará un estado de la transacción y un estado de notificación, que notaremos como un par (ESTADO_DE_TRANSACCIÓN, ESTADO_DE_NOTIFICACIÓN). +

* El estado de la transacción podrá ser: ACKNOWLEDGED, RESPONSIBLE, DELIVERED o APPLIED.
* El estado de la notificación será NO_ACTION_REQUIRED, TO_BE_NOTIFIED, RECEPTION_NOTIFIED o SENDING_NOTIFIED. 

El significado y uso de cada estado se explicará a continuación junto con el protocolo.

NOTE: Cuando digamos que T recibe/registra una transacción nueva, nos referimos a que tiene una nueva transacción que procesar.

.Pasos del protocolo
. T registra una transacción nueva que debe procesar, entonces la guarda en su base de datos interna con el par de estados (RESPONSIBLE, NO_ACTION_REQUIRED). 
. Cuando T (siguiendo su lógica interna) concluye que debe enviar transacciones que están en el estado (RESPONSIBLE,NO_ACTION_REQUIRED) a otro módulo (que será de tipo R), pasa a estas transacciones al estado   (RESPONSIBLE, TO_BE_NOTIFIED).
. Periódicamente T revisa si tiene transacciones en la combinación (RESPONSIBLE,TO_BE_NOTIFIED) o (RESPONSIBLE, SENDING_NOTIFIED). 
** Si tiene transacciones en alguno de esos pares de estados, envía el evento TransactionsWaitingTransferenceEvent, para que un módulo responsable se haga cargo y *luego de envíar el evento* pasa las transacciones del estado (RESPONSIBLE,TO_BE_NOTIFIED) al estado (RESPONSIBLE, SENDING_NOTIFIED), las que ya estaban en SENDING_NOTIFIED no cambian su estado. 
** Si no tiene transacciones en ese estado sigue con el análisis del resto de las transacciones.
. Por otro lado, cuando R escucha el evento que lanzó T, mira que el origen del evento es T y llama a un método de la interfaz de T que retorna una lista con todas las transacciones que tiene guardadas en estado (RESPONSIBLE, SENDING_NOTIFIED). **T no cambia el estado de las transacciones que tiene almacenadas cuando R hace esta consulta.**
. R recorre la lista y almacena en una base de datos interna cada transacción de a una a la vez con el estado (ACKNOWLEDGED, TO_BE_NOTIFIED). 
. Luego, para cada transacción en estado (ACKNOWLEDGED, TO_BE_NOTIFIED) en su base de datos, R llama a otro método de T al cual le pasa el ID de la transacción. La ejecución de este método marca en la base de datos *de T* a dicha transacción como (DELIVERED, RECEPTION_NOTIFIED). *Luego de esa llamada al método de T*, *R* marca la transacción en estado (RESPONSIBLE, RECEPTION_NOTIFIED). 

NOTE: El motivo por el cual primero se notifica y luego se confirma se hace para garantizar que la transacción fue correctamente confirmada por T antes de marcar que lo fue en la base de datos de R.

Aquí termina el protocolo de traspaso simple, pero podemos considerar un paso extra para contemplar la acción que realiza R sobre las transacciones recibidas. 

[start=7]
. R toma las transacciones en estado (RESPONSIBLE, RECEPTION_NOTIFIED) y realiza su tarea. *Luego de aplcar la tarea* las pasa a (APPLIED, RECEPTION_NOTIFIED)

[[Fermat-DMP-CryptoTransactionLayer-TransactionTransferProtocol-TransactionSenderAprox]]
.NOTAS DEL PROTOCOLO
* Dado que mencionamos dos métodos de T, podemos definir una interfaz llamada `TransactionsSender` que los identifique. 
** `List<TransactionInformation> getPendingTransactions()` para obtener la lista de transacciones a traspazar
** `void confirmReception(TransactionID x)` para comunicar la recepción de una transacción.

NOTE: Para la versión final del protocolo esta interfaz se modificará levemente. 

* Cuando se involucra sólo a dos módulos (uno de tipo R y otro T), este protocolo se implementa con tres agentes en T y otros tres en R.
** El main thread de T es quien implementa la interfaz de transacciones de T (los métodos.
** En primer agente de T es quien monitorea la aparición de nuevas transacciones y las escribe en una tabla con el estado (RESPONSIBLE, NO_ACTION_INTENDED).
** El segundo agente mira esa tabla, ejecuta una lógica interna y cuando determina que deben traspasarse las transacciones a otro módulo pasa las transacciones correspondientes del estado (RESPONSIBLE, NO_ACTION_INTENDED) a (RESPONSIBLE, TO_BE_NOTIFIED).
** El tercer agente es quien se despierta periódicamente, y cuando encuentra transacciones en estado (RESPONSIBLE, TO_BE_NOTIFIED) o (RESPONSIBLE, SENDING_NOTIFIED) envía el evento TransactionsWaitingTransferenceEvent y marca las que eran TO_BE_NOTIFIED como (RESPONSIBLE, SENDING_NOTIFIED). *Notar que sigue en estado RESPONSIBLE*.
** El main thread de R es quien recibe los eventos de T y los registra en una base de datos interna.
** El primer agente lee los eventos de esta base de datos que llena el main thread, va a buscar la lista de transacciones a T y las guarda una por una en otra tabla de la base de datos con el estado (ACKNOWLEDGED, TO_BE_NOTIFIED).
** El segundo agente mira la tabla que llena el agente anterior con transacciones nuevas y le informa a T que recibió correctamente las transacciones de a una a la vez (a través del método `confirmReception`). Entonces, *tras confirmarle a T la recepción* pasa la misma al estado (RESPONSIBLE, NOTIFIED).
** El tercer agente aplica la tarea de R sobre las transacciones (RESPONSIBLE, NOTIFIED) y las pasa al estado (APPLIED, NO_ACTION_REQUIRED).

* Si nos paramos en una sola tranacción vemos este ciclo de estados en las tablas de T y R.
```

            T         R
   1      (R,NAR)
   2      (R,TBN)
   3      (R,SN)
   4                (AC,TBN)
   5      (D,RN)
   6                (R,RN)
   7                (AP,RN)
   
   Referencias:
   R: RESPONSIBLE        NAR: NO_ACTION_REQUIRED
   D: DELIVERED          TBN: TO_BE_NOTIFIED
   AC: ACKNOWLEDGE       SN: SENDING_NOTIFIED
   AP: APPLIED           RN: RECEPTION_NOTIFIED
```

* <<Fermat-DMP-CryptoTransactionLayer-TransactionTransferProtocol-SBDProtocol,Más adelante>> hablaremos del caso de una comunicación que involucra tres módulos, uno de tipo T (emisor original), uno de tipo R (receptor final) y un módulo intermedio que actúa como tipo R para el emisor original y como tipo T para el receptor final (un puente).
* Al iniciarse un módulo de tipo R, deberá consultar si sus módulos T asociados tienen transacciones acumuladas. Esto se debe a que el módulo pudo inicializarse tras haber perdido varias notificaciones de transacciones nuevas.
* Claramente puede llegar una nueva transacción a T antes que R procese toda la lista de transacciones que ha recibido en una consulta anterior. En este caso T podría disparar nuevamente el evento de que avisa que tiene nuevas transacciones. +
El primer thread de R recibirá ese evento, y luego el segundo thread probablemente traerá, en la lista de transacciones nueva, transacciones que ya ha registrado pero aún el tercer thread no ha confirmado recepción. +
Esto da lugar a que se intente guardar en la base de datos una transacción ya almacenada, dicho caso no deberá considerarse como un error y simplemente deberá ser ignorado. +
* Por otro lado T debe estar preparado para el aviso de que se desea notificar que una transacción se procesó más de una vez. Esto puede darse en el caso en que el tercer thread de R notificó la recepción pero no llegó a persistir en su base de datos el cambio de estado a NOTIFIED, T ignorará el aviso y si todo es correcto esta vez R sí podrá marcar la transacción como NOTIFIED.

[[Fermat-DMP-CryptoTransactionLayer-TransactionTransferProtocol-SBDProtocol]]
== Caso de tres módulos

Llamaremos a este caso el Protocolo SBD (Protocolo **S**ource-**B**ridge-**D**estination). +
En este caso tenemos tres módulos involucrados en el intercambio de transacciones.

* Un módulo S de tipo T (emisor original).
* Un módulo D de tipo R (destinatario final)
* Un módulo B que es tanto de tipo T como R (puente entre E y R)

La utilidad de este protocolo se da cuando un módulo (S) debe delegar una transacción pero no tiene forma de saber a quién debe hacerlo. En este caso se coloca a un receptor temporal (B) que sí puede determinar quién es el receptor indicado para la transacción (D). +

Las variaciones a incorporar leves. Los módulos S y D actuarán como explicamos antes en el protocolo simple (no saben que hay un puente), el puente "simplemente" hará que su tercer agente (correspondiente al tipo R, o sea el de aplicación) lea la tabla que llena el agente 2 y actúa como un módulo tipo T cuya acción es envíar las transacciones cuando están en estado (RESPONSIBLE, NOTIFIED) en lugar de (RESPONSABLE, TO_BE_NOTIFIED)). +
Al esperar que estén en NOTIFIED en lugar de TO_BE_NOTIFIED se garantiza que el traspazo de la transacción de S a B fue completado exitosamente antes de comenzar a transmitir de B a D.

Para considerar la distinción de receptores y otros criterios de clasificación, agregaremos dos parámetros al método `getPendingTransactions` de la interfaz <<Fermat-DMP-CryptoTransactionLayer-TransactionTransferProtocol-TransactionSenderAprox, TransactionSender>> 

```
  List<TransactionInformation> getPendingTransactions(ReceptorType receptorType, TransactionDescription description)
```

donde `receptorType` indicará el tipo de receptor al que se le puede entregar la transacción y `descriprion` será la descripción del tipo de transacciones que debe usarse. Ambos serán enums que encapsulan un string.

Revisemos los pasos, el pasaje de las transacciones de S a B es el protocolo normal para mandar de un T a un R. +
Así que tenemos que B tiene transacciones después del paso 5 del protocolo. Es decir, con el estado (RESPONSIBLE, RECEPTION_NOTIFIED). +
Aquí el paso 7 será que el tercer agente de B decide a quién debe enviar algunas transacciones, las pasa al estado (RESPONSIBLE, TO_BE_NOTIFIED)  (combinación de estados que no se da en el protocolo simple) y marca la transacción con el receptorType adecuado. También anota el evento a lanzar según el análisis realizado. 
Un cuarto agente controlará periódicamente si hay transacciones en este estado (RESPONSIBLE, TO_BE_NOTIFIED), lanzará el evento que indicó el thread anterior y pasará la transacción a (RESPONSIBLE, SENDING_NOTIFIED). +
La implementación del método `confirmReception` de B pasará las transacciones de (RESPONSIBLE, SENDING_NOTIFIED) a
(DELIVERED, SENDING_NOTIFIED) cerrando la participación de B.
Cuando D pida las transacciones colocará el receptorType que lo identifica y posiblemente una descripción sobre la transacciones que quiere retirar (por ejemplo que estén en crypto estado identified) como parámetros de `getPendingTransaction`

Nuevamente, si nos paramos en una sola tranacción vemos este ciclo de estados en las tablas de T y R.
```

              S         B         D
    1      (R,NAR)
    2      (R,TBN)
    3      (R,SN)
    4               (AC,TBN)
    5      (D,RN)
    6                (R,RN)
    7                (R,TBN)
    8                (R,SN)
    9                          (AC,TBN)
   10                (D,RN)
   11                           (R,RN)
   12                          (AP,RN)
   
   Referencias:
   R: RESPONSIBLE        NAR: NO_ACTION_REQUIRED
   D: DELIVERED          TBN: TO_BE_NOTIFIED
   AC: ACKNOWLEDGE       SN: SENDING_NOTIFIED
   AP: APPLIED           RN: RECEPTION_NOTIFIED
```

Estos protocolos serán implementados por diversos plug-ins que interactúan con esta capa.

== Problemas a resolver

=== Analizar livelocks

Ejemplo:

* El tercer agente de T encuentra transacciones en estado (RESPONSIBLE, TO_BE_NOTIFIED) y envía el evento TransactionsWaitingTransferenceEvent. Antes de que actualice la transacción al estado (RESPONSIBLE, SENDING_NOTIFIED) el agente de R se lleva la transacción, la registra y confirma su recepción. Esto lleva a que el estado cambie a (DELIVERED,RECEPTION_CONFIRMED). Finalmente este agente ejecuta la actualización en su thread y escribe el estado de notificación SENDING_NOTIFIED. 
Aquí dependemos de la implementación que se haya hecho en el plug-in de databaseManager:
** Si se actualizan todos los campos tendremos el estado final (RESPONSIBLE, SENDING_NOTIFIED) y la transacción pasará a ser enviada de nuevo. Para resolver eso deberíamos hacer que los módulos R al recibir varias veces una transacción, no lancen un error pero sí deben llamar de nuevo al método de notificación.
** Si se actualiza sólo el campo modificado del record se obtendría el estado final (DELIVERED,SENDING_NOTIFIED), lo cual no es del todo un problema pero demuestra que algo simple como esto parece tiene muchos detalles acarreados por la concurrencia.

=== No aplicable

Si bien este es un buen inicio, no soluciona el problema. En la versión 2 refinamos las cosas para que se pueda adaptar mejor a cambios.

=== Simplicidad

ESTO DE ABAJO ESTÁ MAL, PORQUE SE MARCA COMO (ACKNOWLEDGE,TO_BE_NOTIFIED) y no como RESPONSIBLE.
Tengo la impresión de que esto anda y que la explicación es entendible y será fácil de entender la implementación tras leer esto. La duda que tengo es que es muy evidente que puedo fusionar algunos threads. Por ejemplo, podría optimizarse la implementación si el agente 1 de R marca la transacción primero como (RESPONSIBLE,TO_BE_NOTIFIED), luego llama a `confirrmReception` y finalmente cambia la transacción al estado (RESPONSIBLE,RECEPTION_NOTIFIED). Esto permitiría eliminar el agente 2 dado que de todas formas el protocolo está preparado para recibir varias veces la misma transacción (si es que llega a darse que se cae el equipo antes de confirmar la transacción o entre la confirmación y la persistencia en la base de datos (de R) de la confirmación). +
La optimización trae dos defectos leves:

* Uno semántico es que temporalmente ambos módulos (R y T) tendrán la misma transacción con el estado RESPONSIBLE, en cuyo caso podríamos asumir que ambos son responsables de esa transacción (como dijimos antes, esto no tiene problemas de implementación).
* El segundo tiene relación con el <<Fermat-DMP-CryptoTransactionLayer-TransactionTransferProtocol-SBDProtocol,protocolo SBD>>, el cual debería considear nuevos estados para las transacciones y estados de notificación. Pero obviamente puede implementarse.

Habría que ver el análisis fino, si vemos la sección anterior se encuantran posibles trazas que podrían generar problemas. Fusionar threads reduce la concurrencia pero les da más tareas a un mismo thread por lo que las acciones que realiza pueden ser más complejas de analizar.

=== Eventos (ESTO SE VA A MOVER A LA DOCUMENTACIÓN DEL PLUG-IN INCOMING CRYPTO)

Necesitamos hacer que el incoming crypto implemente un puente del protocolo SBP con un evento especial para avisarle a los incoming crypto especializados que le pidan transacciones nuevas. +
Por lo que veo hay que hacer que el método `getPendingTransactions` tome un parámetro que diga qué destino tienen las transacciones. Así quién recibió el evento se lleva las que les corresponde y no las de otros.

Para los estados de las crypto noté que hay eventos especializados como

* IncomingCryptoIdentifiedFromIntraUserEvent
* IncomingCryptoIdentifiedFromExtraUserEvent
* ...

Por lo que probablemente habrá usaremos dichos eventos. +
Hay que modificar las cosas para poder mandar y coordinar la comunicación del crypto estado de cada transacción (Identified, received, etc), esto lo veremos en la versión 2 y dejamos esto como guía/borrador de referencia.
