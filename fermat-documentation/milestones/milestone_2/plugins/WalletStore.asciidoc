= Wallet Store - Network Service Layer

Este network service es un nodo de la DAPP Wallet Store. +
Su misión es encontrar billeteras que no tenga registradas localmente para mostrar al usuario a
través del Wallet Store (Sub App), también debe comunicar a otros nodos que posee una billetera
nueva cuando el usuario publica una a través de la Sub App Wallet Publisher.

Debemos definir la política de comunicación de este network service, es decir: 

* ¿a quién le envía la información de una nueva wallet?
* ¿cómo pide información de una wallet que no tiene en su catálogo?

Dentro de la información relevante a las wallets debemos comunicar:

* Id de la wallet en el Wallet Store
* Nombre de la Wallet
* Id y nombre del Desarrollador
* Versión de la wallet
* Una descripción textual de la wallet.

Otros datos como calificación de la wallet hecha por usuarios de la red, o la información de si ya
está instalada o no en la plataforma será consultado a otros plugins por el wallet store de la capa
middleware y no se almacenará en el catálogo.

Debemos pensar cómo manejar las múltiples versiones de una wallet a nivel del catálogo. +
La plataforma posee el código de las diferentes versiones de cada wallet. En principio podríamos
permitir al usuario descargar la versión que prefiera. Para esto tendríamos que almacenar una lista
de versiones en lugar de una sola versión.

Una forma inicial de determinar este conjunto es colocar las wallets más descargadas en la región
del usuario, podemos añadir otros factores de filtros como edad, género, etc. +
A medida que agregamos contactos a la wallet también podríamos hacer que los network services de la
Wallet Store intercambien información para obtener más wallets en sus carálogos. +

A futuro debemos incorporar que se coloque un campo que hable de la lisencia de la wallet (precio de descarga y/o uso)

== Avance

Las entradas del catálogo tendrán un hash almacenado en el código de la plataforma, el cual se accede a
través de una interfaz que implementa la niche wallet. Cuando el network service
recibe información de una nueva wallet del catalogo primero identifica la wallet. Si la tiene en la
versión de la plataforma que tiene instalada pasa a verificar que este hash sea igual al hash de la
última versión de la wallet registrada en la interfaz de la misma y si esto coincide entonces calcula
hash de la información para verificar la autenticidad del item del catálogo para pasar a registrarlo
en su copia local del catálogo-

=== Avance versión 2

Lo anterior se reemplazará por encriptación asimétrica. En vez de colocar hashes en la interfaz se
colocará la clave pública del developer. Así se enviarán las cosas firmadas con la clave privada y
las verificaciones se realizarán usando la clave pública que se adquiere de la interfaz. +