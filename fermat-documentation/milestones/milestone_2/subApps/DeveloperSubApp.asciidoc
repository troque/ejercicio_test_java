= Developer SubApp

Dentro del sistema cada usuario podrá tener varias identidades (ver Identity Layer). En escencia una
identidad es un par de claves (una pública y una privada). Las claves se usarán para firmar mensajes
que envía el usuario desde sus distintas identidades para poder certificar que él es el emisor. +
Una identidad particular es la identidad de Device User. Para este milestone la identidad como developer
estará asociada a una identidad de device user. +

La función de esta sub aplicación es permitir a usuarios registrarse y logearse con identidad de
desarrolladores. +
Además debe proveer herramientas de debug apta que el desarrollador pueda obtener cierta información
de su wallet. Por ejemplo, ver las tablas y el loggeo del módulo.

Actualmente el sistema asume que desde el inicio hay un único Device User que está logueado todo el
tiempo. Se usa un userId hardcodeado en diversos archivos como identificación del Device User.
Esto deberá cambiar para identificar al ususario con una clave pública. +
A lo hecho en el milestone 1 debemos agregar que cuando se ingresa a esta sub app
se permita a un usuario crear una identidad como Developer o identificarse como una ya existene.
Esta identidad debería asociarse a la identidad del Device User. Para esto requerimos consultar al
plugin Developer de la capa Identity. +
Las funciones que debería agregar la subapp son:

* Permitir crear una nueva identidad como Developer (es decir, poder registrarse como Developer
ingresando un alias) y amarrar al device user logueado
* Importar/exportar la identidad de developer. Inicialmente esto corresponde al par de claves y al
alias del mismo.

== Developer plug-in - Module Layer

Este es el plug-in que conecta los fragmentos del front-end con los plugins que manipulan la lógica
de negocios de la información que utiliza el plug-in. Por ejemplo: Si desea la lista de Developers
registrados para el usuario actualmente logueado llama a este plug-in. Si bien para este milestone la
mayoría de las llamadas a este plug-in serán directamente pasadas a otros, cuando incorporemos
funcionalidades más elaboradas como registros de reportes de error entonces este plug-in tendrá más
robustés.

== Developer plug-in - Identity Layer

Este plugin es quien almacena el par de claves y el alias de un desarrollador nuevo. +
El plugin deberá escuchar los eventos de login (lanzados cuando un usuario se logea en la plataforma)
y en base a estos almacenar quién es el usuario logueado actualmente. Si requiere conocer el usuario
pero no escuchó el evento, puede consultar al addon Device User quién está logueado actualmente. +
De forma análoga este plugin debe lanzar un evento cuando un usuario se identifica como developer y
proveer un método que permita consultar la identidad de Developer actualmente logueada.


En esta versión primitiva debería exponer los métodos:

* List<DeveloperIdentity> getDevelopersFromActualUser() throws CantGetUserDeveloperIdentitiesException
que retorna la lista de developers asociados al usuario actualmente logeado.
* void createNewDeveloper(String alias) throws CantCreateNewDeveloperException que crea una nueva
identidad como developer para el usuario actualmente logeado. El plugin Developer de la capa Identity
es a quien se delega esta tarea.
* void login(String alias) throws DeveloperLoginFailedException : Se loguea con la identidad que se pasa
como argumento. Si este developer no existe se lanza la excepción mostrada.
* DeveloperIdentity getActualDeveloper() throws CantGetDeveloperException : Retorna el developer con
quien se está identificando actualmente.

La interfaz DeveloperIdentity debería permitir obtener las claves (pública y privada) y el alias.