= Wallet Factory

== Wallet Factory SubApp

Esta subaplicación debe permitir al usuario crear y editar wallet factory projects. +
Los wallet factory projects (WFP) encapsulan la siguiente información: 

* Recursos: Imágenes y demás archivos multimedia que utiliza la wallet.
* Estructura de navegación: Es un archivo que representa una estrcutura de clases que representa los
menues, actividades, fragmentos, tabs, botones, etc. Actualmente se puede ver una aproximación de
esta estructura implementada por el plugin WalletRuntime de la capa Module. Esta estructura debería
referenciar a los recursos que deben cargarse y a las clases concretas que implementan el código de
front-end que ejecuta la wallet.

Algunas de las funcionalidades específicas de este módulo serán:

* Queremos poder importar y exportar los recursos y la estructura de navegación (por separado) desde
repositorios github. Esto lo deseamos porque le permitiría al desarrollador poder mover el WFP entre
dispositivos o emuladores con facilidad. +
Además la subApp debería permitir que uno corra la wallet que está editando (si bien uno edita el WFP
nos referiremos al WFP y a la wallet como wallet aclarando la distinción cuando el contexto sea ambiguo). +

Por tanto la subApp debería mostrar los proyectos creados, si un proyecto tiene configurada su estructura
de navegación debería permitir que uno ponga a correr la wallet. Además debería permitir abrir en modo
de edición estos proyectos y editarlos desde la aplicación (agregar/eliminar/redimencionar
distintas partes de la wallet, agregar/quitar tabs, referenciar el código a llamar cuando se toca un
botón o al entrar a un fragmento, etc.).

Para correr la wallet, esta subApp deberá hacer algo similar a lo que actualmente hace la clase
FragmentActivity, pero en vez de pedir la estructura de navegación al Wallet Runtime se la pediría
al plugin Wallet Factory de la capa Module. Los recursos deberán dejar de estar hardcodeados como
están hoy en las mencionadas clases y deberán buscarse los recursos también desde las referencias
de la estrcutura de navegación. Dada la referencia, la clase que implemente el entorno de ejecución
deberá pedirle también al Wallet Factory los recursos que necesita cargar.

== Wallet Factory plugin - Module Layer

Los componentes de la capa module son en general una interfaz entre la interfaz y los módulos que
tienen la lógica de negocios. Cumplen una funcionalidad de procesar la información de los módulos de
abajo para pasar la información que requiere la interfaz gráfica. +
En otras palabras, consiste en la lógica de presentación de la subapp y su definición quedará
definida en términos de lo que pide la UI.

== Wallet Factory plugin - Middleware Layer

Este plugin es quien debe proveerle a la subApp los métodos necesarios para que pueda llevar a cabo
las funcionalidades que no dependen de android. +
Podemos listar entre estas:

* Proveer y persistir WFP.
** Operaciones como Crear, Abrir, Guardar, Guardar Como, Cambiar Nombre, Eliminar, Importar de un
repositorio, Guardar en un repositorio github
* Administrar los recursos: Agregar, Renombrar, Eliminar, etc.

Un desafío en el diseño de este plug-in es diseñar el formato del archivo WFP. Este podría ser la
serialización de las clases de la estructura de navegación junto con los recursos.

== Notas sobre Wallet Factory Project

* Un WFP tiene como información asociada:
** Una reference wallet
** Un nombre dado por el desarrollador
** Un enum que identifica la nueva niche wallet
** Un identificador (UUID) distintivo
** Un tag descriptivo
** Un timestamp de creación
** Un timestamp de última modificación

Desde el wallet factory estos proyectos se listan para poder ser editados. +
En el wallet publisher, tenemos la lista de estos mismos proyectos pero aquí en lugar de editarlos lo
que hacemos es mostrar si pueden ser publicados (si se incorporaron a la versión de la plataforma),
permite publicar los proyectos que no se han publicado como una nueva versión de la wallet y permite
seguir estadísticas de las wallets publicadas. +
Al publicar un proyecto se guarda un snapshot del mismo y se lo despliega en el wallet factory como
una versión con el número de versión seleccionado en el wallet publisher. Este snapshot no se puede editar
pero el wallet factory project sí puede continuar con normalidad.

Los recursos del WFP comprenden

* Un conjunto de skins
* Un conjunto de lenguajes
* La estructura de navegación

Cada skin y paquete de idiomas tiene un hash asociado que se usa para validar su autenticidad a la hora
de descargar los recursos. +
