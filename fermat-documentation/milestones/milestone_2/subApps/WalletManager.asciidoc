= Wallet Manager

== Wallet Manager SubApp

Esta app debe mostrar las wallets intaladas al usuario para permitirle abrirlas, desinstalarlas,
consultar información de las mismas entre otras cosas. Para este milestone queremos que desde la UI
de la sub app simplemente se listen las wallets del usuario actualmente logueado, permita abrirlas y
desisntalarlas. +
El add0n Device User de la capa User es quien lleva la información del usuario que usa el dispositivo.
Cuando un usuario se loguea este plugin además de verificar los datos de login lanza un evento de logueo
exitoso. Los módulos que requieran dicha información le consultan al addon quién es el usuario logueado
actualmente. +

La subApp (un plug-in de la capa middleware para ser más precisos) también debe escuchar un evento
lanzado por el Wallet Store cuando el usuario desea instalar una nueva wallet o una nueva versión de
una wallet, ante el cual debe proceder a instalar la misma. +

== Wallet Manager - Module Layer

Los componentes de la capa module son en general una interfaz entre la interfaz y los módulos que
tienen la lógica de negocios. Cumplen una funcionalidad de procesar la información de los módulos
de abajo para pasar la información que requiere la interfaz gráfica. +
En otras palabras, consiste en la lógica de presentación de la subapp y su definición quedará
definida en términos de lo que pide la UI.

== Wallet Manager - Middleware Layer

Además de administrar la información que maneja el Wallet Manager, este componente es el responsable
de instalar las wallets que el usuario selecciona desde la Wallet Store. +

El Wallet Store le pasa como datos la identificación de la wallet y del desarrollador de la misma. +
El Wallet Manager debe primero controlar que el código de la wallet está instalado en la versión de
la plataforma que se está corriendo. Luego debe pedirle al network service Wallet Resources que
consiga los recursos y la estructura de navegación de dicha wallet. Con estos datos podemos comenzar
el proceso de instalación de la wallet.

. Se genera el WalletId (un UUID que identificará la wallet dentro del dispositivo). +
. Se crea una wallet del tipo correspondiente en la capa de basic wallet pasando como argumento el
mencionado WalletId.
. Se toma la estructura de navegación de la wallet del Wallet Resources y se la pasa al Wallet Runtime
para que la persista, manteniendo la identificación con el WalletId.  +
. Se marca en el Wallet Resources que una nueva wallet está usando los recursos. La idea es que el
wallet resources lleve un registro de cuántas wallets usan los recursos que están instalados, así
cuando se desinstala una wallet se puede saber si los recursos siguen siendo necesarios para marcarlos
como candidatos a ser borrados en caso de requerir más espacio de memoria.

Todo este proceso debe considerar fallas como que el dispositivo se apague en el medio de la instalación
o desisntalación. Para que pueda reanudarse o eliminarse la información parcialmente instalada.

A futuro, el Wallet Manager incorpora también la funcionalidad de permitirle al usuario calificar
las wallet y dejar comentarios/críticas qqe se mostrarán en el wallet store. +
El plug-in Wallet Statistics es quien podría administrar esta información.