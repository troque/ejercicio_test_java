# Conexiones + Intra-User Actor Management
* Para poder relacionarse con otros usuarios de la plataforma se decidió utilizar el concepto de Conexión (no confundir conexión con contacto).
* Para que un usuario se conecte con otro usuario de la plataforma obtendrá información básica como la publicKey del Intra-User Identity de su contra parte.
* Esta información será administrada a través del Plugin Intra-User de la capa Actor.
* El usuario podrá buscar un Intra-User, solicitar una conexión, eliminar y listar conexiones con otros Intra-Users.
* Así también podrá aceptar o denegar peticiones de conexión de otros usuarios.
* Se realiza una diferenciación para los usuarios:
 * Intra-User Identity: Es la identidad que el usuario que esta usando la Sub-App decide usar para realizar las acciones que requiera dentro de la misma.
 * Intra-User Actor: Es la identidad de otro Intra-User usuario de la plataforma.

## Escenarios
* Listar identidades Intra-User
 * Se desplegará una lista de Identidades Intra-User disponibles con las cuales se podrá usar la Sub-App.

* Loguearse a través de una identidad Intra-User
 * El usuario podrá loguearse para realizar las actividades en la Sub-App.

* Buscar un Intra-User
 * El usuario desea buscar a otro Intra-User.
 * Realiza una búsqueda del mismo a través de un alias.
 * Recibe una lista de los posibles Intra-Users con los que querría conectarse.

* Visualizar una posible conexión
 * El usuario realiza una búsqueda para encontrar al Intra-User Actor con el que desea conectarse. "*Buscar un Intra-User*"
 * Lo selecciona para visualizarlo, podrá ver la imagen de perfil del Intra-User.

* Solicitar una conexión con un Intra-User Actor
 * Dado que el usuario necesita tener conexiones dentro de la plataforma para poder realizar ciertas acciones.
 * El usuario realiza una búsqueda para encontrar al Intra-User Actor con el que desea conectarse. "*Buscar un Intra-User*"
 * Lo visualiza. "*Visualizar una posible conexión*" y corrobora que es la persona con la que necesita conectarse.
 * Solicita una conexión con la misma.

* Solicitud de conexión Aceptada por el Intra-User Actor.
 * Previamente el usuario solicita una conexión a un Intra-User. "*Solicitar una conexión con un Intra-User Actor*"
 * El Intra-User con el que el usuario deseaba conectarse acepta la conexión.

* Solicitud de conexión Denegada por el Intra-User Actor
 * Previamente el usuario solicita una conexión a un Intra-User. "*Solicitar una conexión con un Intra-User Actor*"
 * El Intra-User con el que el usuario desea conectarse rechaza la conexión.

* Listar conexiones de un Intra-User
 * El usuario decide consultar sus conexiones efectivas.
 * El usuario recibe una lista de los Intra-Users con los que se encuentra conectado.

* Visualizar una conexión efectiva
 * El usuario decide visualizar una conexión efectiva con un Intra-User.
 * El usuario ingresa a la lista de conexiones que tiene. "*Listar conexiones de un Intra-User*"
 * El usuario selecciona a la conexión que desea visualizar, podrá ver la imagen de perfil del Intra-User.

* Desconectarse de un Intra-User Actor
 * El usuario decide desconectarse de un Intra-User.
 * El usuario ingresa a la lista de conexiones que tiene. "*Listar conexiones de un Intra-User*"
 * El usuario visualiza la conexión que desea desconectar. "*Visualizar una conexión efectiva*"
 * El usuario se desconecta.

* Recibir solicitud de conexión de un Intra-User
 * Dado que los usuario necesita tener conexiones dentro de la plataforma para poder realizar ciertas acciones.
 * Cuando un Intra-User se desee conectar con el.
 * El usuario recibirá una solicitud de conexión y será notificado.

* Listar solicitudes de conexión enviadas
 * Dado que el usuario podrá enviar solicitudes de conexión. "*Solicitar una conexión con un Intra-User Actor*"
 * El usuario decide consultar sus solicitudes de conexión enviadas.
 * El usuario recibe una lista de los Intra-Users a los que le solicitó la conexión.

* Visualizar una solicitud de conexión enviada
 * Cuando el usuario envia una solicitud de conexión "*Solicitar una conexión con un Intra-User Actor*"
 * O cuando el usuario se diriga a la lista de conexiones enviadas "*Listar solicitudes de conexión enviadas*"
 * El usuario podrá ingresar en la misma y ver la imagen de perfil del Intra-User.

* Cancelar solicitud de conexión enviada
 * Cuando el usuario envia una solicitud de conexión "*Solicitar una conexión con un Intra-User Actor*"
 * Tiene la posibilidad de cancelarla.

* Solicitud de conexión Cancelada por el Intra-User Actor
 * Cuando un Intra-User Actor nos envia una solicitud de cancelación de conexión "*Cancelar solicitud de conexión enviada*"
 * Tendremos que cancelar la solicitud que nos llegó.

* Listar solicitudes de conexión recibidas
 * Dado que los usuario necesita tener conexiones dentro de la plataforma para poder realizar ciertas acciones.
 * El usuario podrá recibir solicitudes de conexión. "*Recibir solicitud de conexión de un Intra-User*"
 * El usuario recibe una lista de los Intra-Users a los que le solicitó la conexión.

* Visualizar una solicitud de conexión recibida
 * Cuando el usuario reciba una solicitud de conexión y sea notificado "*Recibir solicitud de conexión de un Intra-User*"
 * O cuando el usuario se diriga a la lista de conexiones recibidas "*Listar solicitudes de conexión recibidas*"
 * El usuario podrá ingresar en la misma y ver la imagen de perfil del Intra-User.

* Aceptar solicitud de conexión de un Intra-User Actor
 * Cuando el usuario reciba una solicitud de conexión y la visualice "*Visualizar una solicitud de conexión*"
 * El usuario podrá aceptar la solicitud de conexión.

* Denegar solicitud de conexión de un Intra-User Actor
 * Cuando el usuario reciba una solicitud de conexión y la visualice "*Visualizar una solicitud de conexión*"
 * El usuario podrá denegar la solicitud de conexión.


## Plugins Involucrados
* DMP/Android: Intra-User Sub-App
 * Tendrá dependencia del Intra-User Module.
 * Es la interfaz gráfica que nos permite administrar las conexiones con actores Intra-User.
 * Es el punto de contacto con el usuario final.
 * Poseerá las actividades/fragmentos que sean necesarios para la administración de este tipo de actor.

* DMP/plugin: Intra-User Module
 * Es el intermediario entre la interfaz gráfica y la plataforma de plugins.
 * Será el encargado de centralizar todas las acciones que se relacionen con la administración de los Intra-Users en la plataforma.
 * Tendrá referencia a los siguientes plugins:
   * DMP/plugin Intra-User Actor
   * DMP/plugin Intra-User Identity
   * DMP/plugin Intra-User Network Service

* DMP/plugin Intra-User Actor
 * Gestiona los actores Intra-User.
 * Será el encargado de mantener una base de datos con la información de los mismos.
 * Tendrá referencia a los siguientes plugins:
   * PluginDatabaseSystem (según el SO que se encuentre corriendo se le entregará el de Android u otro)
 * Listar los Actores Intra-User relacionados a una identidad Intra-User.
 * Solicitar nueva conexión relacionándola a una identidad Intra-User.
 * Cambiar estado de la conexión (PENDING_LOCALLY_ACCEPTANCE, PENDING_REMOTELY_ACCEPTANCE, CONNECTED, LOCALLY_DISCONNECTED, REMOTELY_DISCONNECTED, LOCALLY_DENIED, REMOTELY_DENIED, REJECTED, CANCELLED).
 * Desconectarse de un Intra-User.
 * Aceptar conexión de Intra-User.
 * Denegar conexión de Intra-User.
 * Cancelar conexión de Intra-User.
 * Informa eventos a la Interfaz:
   * Solicitud aceptada por Intra-User Actor
 * Maneja eventos del Network Service:
   * Solicitud aceptada por Intra-User Actor
   * Solicitud denegada por Intra-User Actor
   * Solicitud cancelada por Intra-User Actor

* DMP/plugin Intra-User Network Service
 * Buscar Intra-Users en la red de la plataforma.
 * Permite la comunicación entre Intra-Users.
   * Solicitar conexión a otro Intra-User.
   * Aceptar petición de conexión.
   * Denegar petición de conexión.
   * Borrar conexión.
 * Informa eventos a la Plataforma:
   * Solicitud aceptada por Intra-User Actor
   * Solicitud denegada por Intra-User Actor

* DMP/plugin: Intra-User Identity
 * Gestiona las identidades de tipo Intra-User.
 * Será el encargado de mantener una base de datos y un sistema de archivos con los datos de los mismos.
 * Lista los Intra-Users vinculados al Device-User logeado.

## Flujos

| Plugin                                  | Short           |
| --------------------------------------- |:---------------:|
| DMP/Android: Intra-User Sub-App         | Sub-App         |
| DMP/plugin:  Intra-User Module          | Module          |
| DMP/plugin:  Intra-User Identity        | Identity        |
| DMP/plugin:  Intra-User Actor           | Actor           |
| DMP/plugin:  Intra-User Network Service | Network Service |

* Listar identidades Intra-User
 * El usuario podrá consultar la lista de Identidades Intra-User con las cuales poder usar la Sub-App
 * Sub-App
   * Podrá visualizar un combo con las diferentes identidades y tendrá la posibilidad de Loguearse a través de una de ellas.
   * Al combo lo arma consultando al Module las identidades disponibles.
 * Module
   * Es consultado a través del método <code>showAvailableLoginIdentities()</code>
   * Retorna una lista de las identidades Intra-User que trae del Identity
   * Como no es necesario proveerle a través de este método la posibilidad de firmar o verificar, los datos de los Intra-User identities serán mostrados a través de una interfaz que no los contenga.
 * Identity
   * Es consultado a través del método <code>getIntraUsersFromCurrentDeviceUser()</code>

* Loguearse a través de una identidad Intra-User
 * El usuario deberá elegir una identidad para trabajar en la Sub-App
 * Sub-App
   * Elije la identidad de una lista y la selecciona. "*Listar identidades Intra-User*"
 * Module
   * Para loguear al Intra-User es llamado a través del método <code>login()</code>

* Buscar un Intra-User
 * El usuario podrá hacer una búsqueda de Intra-Users en la plataforma a través de su alias.
 * Sub-App
   * Campo de búsqueda por alias (criterio de búsqueda)
   * Lista de resultados (resultado de la búsqueda)
   * Tendrá la opción de visualizar los resultados "*Visualizar una posible conexión*"
   * La búsqueda la realiza a través de la clase IntraUserSearch del Module.
 * Module
   * A través del método <code>searchIntraUser</code> del Manager devuelve una instancia de la clase <code>IntraUserSearch</code>.
   * Los criterios de búsqueda se setean en esta clase: <code>IntraUserSearch.setNameToSearch()</code>.
   * Para realizar la búsqueda se llama al método <code>IntraUserSearch.getResult()</code>, el mismo consulta al Network Service.
   * Una vez recibidos los datos del Network Service, deberá filtrar aquellas identidades que pertenezcan al Device User logueado (consultando al Identity a través de <code>showAvailableLoginIdentities</code>)
   * Esto es para evitar que un usuario se pueda conectar consigo mismo.
 * Network Service
   * Es llamado por el módulo a través del método <code>searchIntraUserByName(intraUserAlias)</code> de su Manager.
   * Devuelve una lista de <code>IntraUserInformation</code> con datos de relevancia de los usuarios (nombre, imagen de perfil, publicKey).

* Visualizar una posible conexión
 * El usuario podrá Visualizar una posible Conexión (Intra-User) seleccionándolo en la lista devuelta a través de la búsqueda. "*Buscar un Intra-User*"
 * Sub-App
  * Se visualizará el campo Nombre y la Imagen de Perfil del Usuario
  * Se dará la opción al usuario de Solicitar una conexión con el Intra-User seleccionado. "*Solicitar una conexión con un Intra-User Actor*"

* Solicitar una conexión con un Intra-User Actor
 * El usuario podrá solicitar la conexión con otro Intra-User luego de haberlo identificado. "*Visualizar una posible conexión*"
 * Sub-App
   * La solicitud la realizará a través del método <code>askIntraUserForAcceptance</code> en el Manager Module.
 * Module
   * Método <code>askIntraUserForAcceptance(intraUserToAddAlias, intraUserToAddPublicKey, profileImage)</code>
   * A partir de esto, primero creará un Intra-User Actor (con estado PENDING_REMOTELY_ACCEPTANCE) a través del Actor.
   * Luego solicitará la aceptación a través del Network Service.
   * A ambos les enviará también la publicKey del Intra-User Identity que se encuentre logueado.
 * Crea el nuevo Intra-User Actor en estado PENDING_REMOTELY_ACCEPTANCE, en caso de existir, verificar el estado, y cambiar el estado a PENDING_REMOTELY_ACCEPTANCE.
   * Actor
     * Método en el Manager: <code>askIntraUserForAcceptance(intraUserLoggedInPublicKey, intraUserLoggedInName, intraUserToAddPublicKey, myProfileImage)</code>
     * Agrega otros datos de referencia como la <code>ContactRegistrationDate</code>
 * Solicita la aceptación a través del Network Service
   * Network Service
     * Método en el Manager: <code>askIntraUserForAcceptance(intraUserLoggedInPublicKey, intraUserLoggedInName, intraUserToAddPublicKey, myProfileImage)</code>

* Solicitud de conexión Aceptada por el Intra-User Actor.
 * El usuario recibirá una notificación de que ha sido aceptado y podrá observar la nueva conexión en "*Listar conexiones de un Intra-User*".
 * Network Service
   * Será contactado y se le informará la aceptación por parte del Intra-User Actor en la contraparte.
   * Levantará un evento INTRA_USER_CONNECTION_ACCEPTED
 * Actor
   * El plugin poseerá in listener sobre el evento INTRA_USER_CONNECTION_ACCEPTED
   * A través de un EventHandler cambiará el estado del Intra-User Actor a CONNECTED.
   * Levantará un evento INTRA_USER_CONNECTION_ACCEPTED_NOTIFICATION para que escuche la Interfaz.
 * Interfaz . Ver quién lo escuchará y como reaccionará. <-----------

* Solicitud de conexión Denegada por el Intra-User Actor
 * El usuario no será notificado de la denegación de la contraparte.
 * Network Service
   * Será contactado y se le informará la denegación por parte del Intra-User Actor en la contraparte.
   * Levantará un evento INTRA_USER_CONNECTION_DENIED
 * Actor
   * El plugin poseerá in listener sobre el evento INTRA_USER_CONNECTION_DENIED
   * A través de un EventHandler se cambiará el estado del actor a REMOTELY_DENIED.

* Listar conexiones de un Intra-User
 * El usuario podrá listar todas las conexiones efectivas que posee.
 * Sub-App
   * Lista de conexiones
   * Tendrá la opción de visualizar los elementos de la lista "*Visualizar una conexión efectiva*"
 * Module
   * A través del método <code>getAllIntraUsers</code> del Manager devuelve la lista de los Intra-User Actores que se encuentran como CONNECTED.
   * Este se comunica con el plugin Actor, para filtrar los Intra-Users según la identidad logueada.
 * Actor
   * Es llamado por el módulo a través del método <code>getAllIntraUsers(intraUserLoggedInPublicKey)</code> de su Manager.
   * Devuelve una lista de <code>ActorIntraUser</code> con datos de relevancia de los usuarios (nombre, imagen de perfil, publicKey).

* Visualizar una conexión efectiva
 * El usuario podrá Visualizar una Conexión efectiva (Intra-User Actor) seleccionándolo en la lista de conexiones. "*Listar conexiones de un Intra-User*"
 * Sub-App
  * Se visualizará el campo Nombre, la Imagen de Perfil del Usuario y la fecha y hora de registro del mismo.
  * Se dará la opción al usuario de Desconectarse del Intra-User seleccionado. "*Desconectarse de un Intra-User Actor*"

* Desconectarse de un Intra-User Actor
 * El usuario podrá desconectarse de otro Intra-User luego de haberlo identificado. "*Visualizar una conexión efectiva*"
 * Sub-App
   * La desconexión la realizará a través del método <code>deleteIntraUSer</code> en el Manager Module.
 * Module
   * Método <code>deleteIntraUser(intraUserToRemovePublicKey)</code>
   * A partir de esto, primero cambiará el estado del Intra-User Actor a LOCALLY_DISCONNECTED a través del Actor.
   * Luego solicitará la desconexión a través del Network Service.
   * A ambos les enviará también la publicKey del Intra-User Identity que se encuentre logueado.
 * Cambia el estado del Intra-User Actor a LOCALLY_DISCONNECTED
   * Actor
     * Método en el Manager: <code>deleteIntraUser(intraUserLoggedInPublicKey, intraUserToRemovePublicKey) </code>
 * Solicita la desconexión a través del Network Service
   * Network Service
      * Método en el Manager: <code>deleteIntraUSer(intraUserLoggedInPublicKey, intraUserToRemovePublicKey)</code>

* Recibir solicitud de conexión de un Intra-User
 * El usuario podrá recibir solicitudes de conexión de otros Intra-Users.
 * Network Service
   * Será contactado y se le informará la solicitud de conexión por parte del Intra-User Actor.
   * Levantará un evento INTRA_USER_REQUESTED_CONNECTION_RECEIVED
 * Actor
   * El plugin poseerá in listener sobre el evento INTRA_USER_REQUESTED_CONNECTION
   * A través de un EventHandler crea el nuevo Intra-User Actor en estado PENDING_LOCALLY_ACCEPTANCE, en caso de existir, le cambia el estado a PENDING_LOCALLY_ACCEPTANCE.
   * Levantará un evento INTRA_USER_REQUESTED_CONNECTION_RECEIVED_NOTIFICATION para que escuche la Interfaz.
 * Interfaz . Ver quién lo escuchará y como reaccionará. <-----------

* Listar solicitudes de conexión enviadas
 * El usuario podrá listar todas las solicitudes de conexión que envió.
 * Sub-App
   * Lista de conexiones enviadas
   * Tendrá la opción de visualizar los elementos de la lista "*Visualizar una solicitud de conexión enviada*"
 * Module
   * A través del método <code>getIntraUsersWaitingYourAcceptance</code> del Manager devuelve la lista de los Intra-User Actores que se encuentran como PENDING_REMOTELY_ACCEPTANCE.
   * Este se comunica con el plugin Actor, para filtrar los Intra-Users según la identidad logueada.
 * Actor
   * Es llamado por el módulo a través del método <code>getWaitingYourAcceptanceIntraUsers(intraUserLoggedInPublicKey)</code> de su Manager.
   * Devuelve una lista de <code>ActorIntraUser</code> con datos de relevancia de los usuarios (nombre, imagen de perfil, publicKey).

* Visualizar una solicitud de conexión enviada
 * El usuario podrá Visualizar una Conexión enviada (Intra-User Actor) seleccionándolo en la lista de conexiones enviadas. "*Listar solicitudes de conexión enviadas*"
 * Sub-App
  * Se visualizará el campo Nombre, la Imagen de Perfil del Usuario y la fecha y hora de registro del mismo.
  * Se dará la opción al usuario de Cancelar la solicitud de conexión con Intra-User seleccionado. "*Cancelar solicitud de conexión enviada*"

* Cancelar solicitud de conexión enviada
 * El usuario podrá cancelar una conexión solicitada luego de haberla identificado. "*Visualizar una solicitud de conexión enviada*"
 * Sub-App
   * Se conectará con el module solicitando la cancelación de la solicitud.
 * Module
   * A través del método <code>cancelIntraUser(intraUserToCancelPublicKey)</code> llama al Actor para realizar la cancelación.
   * Le enviará también la publicKey del Intra-User Identity que se encuentre logueado.
 * Actor
   * Es llamado por el módulo a través del método <code>cancelIntraUser(intraUserLoggedInPublicKey, intraUserToCancelPublicKey)</code> de su Manager.
   * Cambia el estado del actor a CANCELLED.

* Solicitud de conexión Cancelada por el Intra-User Actor
 * El usuario no será notificado de la cancelación de la contraparte.
 * Network Service
   * Será contactado y se le informará la cancelación por parte del Intra-User Actor en la contraparte.
   * Levantará un evento INTRA_USER_CONNECTION_CANCELLED
 * Actor
   * El plugin poseerá in listener sobre el evento INTRA_USER_CONNECTION_CANCELLED
   * A través de un EventHandler se cambiará el estado del actor a CANCELLED.

* Listar solicitudes de conexión recibidas
 * El usuario podrá listar todas las solicitudes de conexión que recibió.
 * Sub-App
   * Lista de conexiones recibidas
   * Tendrá la opción de visualizar los elementos de la lista "*Visualizar una solicitud de conexión recibida*"
 * Module
   * A través del método <code>getWaitingTheirAcceptanceIntraUsers</code> del Manager devuelve la lista de los Intra-User Actores que se encuentran como PENDING_LOCALLY_ACCEPTANCE.
   * Este se comunica con el plugin Actor, para filtrar los Intra-Users según la identidad logueada.
 * Actor
   * Es llamado por el módulo a través del método <code>getWaitingTheirAcceptanceIntraUsers(intraUserLoggedInPublicKey)</code> de su Manager.
   * Devuelve una lista de <code>ActorIntraUser</code> con datos de relevancia de los usuarios (nombre, imagen de perfil, publicKey).

* Visualizar una solicitud de conexión recibida
 * El usuario podrá Visualizar una Conexión recibida (Intra-User Actor) seleccionándolo en la lista de conexiones recibidas. "*Listar solicitudes de conexión recibidas*"
 * Sub-App
  * Se visualizará el campo Nombre, la Imagen de Perfil del Usuario y la fecha y hora de registro del mismo.
  * Se dará la opción al usuario de Aceptar la solicitud de conexión con Intra-User seleccionado. "*Aceptar solicitud de conexión de un Intra-User Actor*"
  * Se dará la opción al usuario de Denegar la solicitud de conexión con Intra-User seleccionado. "*Denegar solicitud de conexión enviada*"

* Aceptar solicitud de conexión de un Intra-User Actor
 * El usuario podrá Aceptar una conexión solicitada luego de haberla identificado. "*Visualizar una solicitud de conexión recibida*"
 * Sub-App
   * Se conectará con el module solicitando la aceptación de la solicitud.
 * Module
   * A través del método <code>acceptIntraUser(intraUserToAddName, intraUserToAddPublicKey, profileImage)</code> llama al Actor para realizar la aceptación.
   * Le enviará también la publicKey del Intra-User Identity que se encuentre logueado.
 * Actor
   * Es llamado por el módulo a través del método <code>acceptIntraUser(intraUserLoggedInPublicKey, intraUserToAddName, intraUserToAddPublicKey, profileImage) </code> de su Manager.
   * Cambia el estado del actor a CONNECTED.

* Denegar solicitud de conexión de un Intra-User Actor
 * El usuario podrá Denegar una conexión solicitada luego de haberla identificado. "*Visualizar una solicitud de conexión recibida*"
 * Sub-App
   * Se conectará con el module solicitando la Denegación de la solicitud.
 * Module
   * A través del método <code>denyConnection(intraUserToRejectPublicKey)</code> llama al Actor para realizar la Denegación.
   * Le enviará también la publicKey del Intra-User Identity que se encuentre logueado.
 * Actor
   * Es llamado por el módulo a través del método <code>denyConnection(intraUserLoggedInPublicKey, intraUserToRejectPublicKey) </code> de su Manager.
   * Cambia el estado del actor a LOCALLY_DENIED.
