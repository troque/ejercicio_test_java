= Agregado de contactos

El concepto de contacto depende en este momento de una wallet a la cual el contacto está asociado.
Con esto intentamos decir que uno agregará contactos desde una wallet. No es extraño pensar que un
usuario que use más de una wallet quiera tener al mismo contacto en varias de ellas. +
En un análisis más profundo, un contacto representa una relación más general entre usuarios que
identificaciones para enviar y recibir dinero. La plataforma puede brindar servicios más amplios como
podría ser un simple servicio de chat entre usuarios. +
Por ende crearemos una sub app para manejar a los intra users la cual nos permitirá buscar, agregar,
eliminar usuarios que tomaremos como conexiones, reservamos el uso de la palabra contacto para usuarios
que agregamos a wallets. El componente que administrará estos intra users será el intra user de la
capa Actor. Además, desde cada wallet podremos relacionar a estos intra users como contactos de la
wallet agregando registros al wallet contacts. +
Analicemos en detalle el proceso de agregar una conexión y un contacto.

== Agregado de conexiones

Tras encontrar al usuarios que deseamos agregar como conexión iniciamos a través del plugin Intra User
de la capa module el proceso de agendarlo. Esto involucra por un lad incorporar un registro en el
plugin Actor Intra User (plugin Intra User de la capa Actor) que almacene los datos del usuario como
la public key, nombre del intra user, fecha en que agendamos al contacto, foto de perfil entro otros
junto con un estado que mencione que la solicitud fue enviada. Por otro lado involucra invocar al
plugin Intra User Network Service para que efectivamente envíe esta solicitud adjuntando los mismos
datos que agendamos nosotros en nuestros registros pero detallando nuestra información de la identidad
de intra user que estemos utilizando para agendar la conexión. +
Desde el otro extremo (el receptor de nuestra solicitud) eventualmente aceptará o rechazará nuestra
solicitud. Si la acepta, se comunicará la decisión a través del Intra User Network Service y cambiaremos
el estado que colocamos en el registro del Actor Intra User a "Conexión". +
Si rechaza nuestra solicitud, también se nos informará y se quitará el registro que habíamos agregado
al plugin Actor Intra User para ese usuario. +

== Agregando contactos

Como mencionamos arriba, en el plugin DMP Actor Intra User tendremos almacenados la public key,
nombre del intra user, fecha en que agendamos al contacto, foto de perfil, un estado que indicará si
han aceptado o no nuestra solicitud de contacto ("Solicitud enviada", "Conexión").

Cuando incorporamos un usuario como contacto de una wallet tendremos dos situaciones:

Si ya hemos agregado al instra user en el módulo de Actor Intra User como conexión. +

En este caso agregaremos al actor address book y al wallet address book la dirección que le enviamos
a este contacto y agregamos al wallet contacts la siguiente informacion:

* Contact Id: será un UUID.
* La public key del actor (tendremos que cambiar el UUID que tienen los extra users por un public key
para mantener uniformidad, los device users e intra users ya usan public keys)
* El nombre que le demos al contacto
* La public key de la wallet
* El tipo de actor (Device, extra o intra user)
* La dirección crypto que nos dan para enviar dinero debería ser almacenada aquí. En principio no
tendremos este dato hasta que el otro usuario acepte nuestra solicitud para agendarlo. Cuando el usuario
nos acepte como contacto nos enviará la dirección que se almacenará aquí a través del crypto addresses
network service.
* Un estado que indique si el otro usuario ya nos envió una dirección para poder enviarle crypto.

Cuando tengamos la confirmación de que aceptaron nuestra solicitud (información que vendrá con la
deriección que usaremos para enviarle dinero a la otra persona) actualizamos este dato en el wallet
contacts+

Si no tenemos agendado el intra user en el plugin DMP Actor Intra User entonces debemos primero agregar
allí al usuarioc como conexión y posteriormente agregar al usuario como contacto siguiendo el proceso
antes descripto. La combinación de ambos procesos (agendar como conexción y contacto) debería ser
transparente al usuario final, es decir, se le mostrará que quieren agendarlo y se le dará la opción
de aceptar o no al contacto de wallet y con eso se dispararán todos lo procesos necesarios.

// COMENTARIO RECORDATORIO - IGNORAR - ASCIIDOC NO RENDERIZA ESTOS COMENTARIOS
//
// Contacts -> La dir que me dio para que le mande
// ActorAddBook ->  La que le di para que me mande
// Extra User -> Id y nombre


== Network Service Crypto Addresses - Agendar contactos en wallet - Intercambio de direcciones

A la hora de agendar un contacto en una wallet tenemos otros desafíos que analizar. +
Si bien hoy tenemos una única reference wallet debemos considerar que en el futuro habrán wallets de
diversos tipos y quizás no todas resulten compatibles entre sí para enviarse dinero. +
Nace entonces la necesidad de pensar qué dirección nos daría el intra user a agendar si no dispone de
una wallet compatible con la que usamos para agendarlo; más aún debemos definir un mecanismo para decidir
cuando dos wallets son compatibles. +

En principio si tenemos dos niche wallets que se basan en la misma reference wallet estas deberían
ser compatibles dado que usan el mismo plugin de la capa basic wallet para llevar la información
transaccional. El problema entonces aparenta poder reducirse a analizar la compatibilidad de las
reference wallets del sistema. +
Sin embargo puede darse que distintas reference wallets sean compatibles entre sí. Por ejemplo,
una wallet no nos permita gastar bitcoins si el precio actual es inferior al precie de cuando se compraron
los bitcoins sería compatible con la reference bitcoin wallet dado que la interfaz de crédito y débito
de ambas wallets es idéntica. +

Por ende, cuando nos llegue una solicitud de otro usuario para agendarlo como contacto en una wallet
tendremos como dato el tipo de reference wallet desde la cual nos están agendando y debemos probablemente
tener un módulo que decida desde qué wallet podemos aceptarlo como contacto o, en caso de que no tengamos
ninguna, nos sugiera instalar alguna del catálogo. +
Una vez resuelto el tema de la compitibilidad de wallets el mensaje de aceptación registra entre otros
datos una dirección que nos enviaron con la solicitud de contacto a la cual enviar dinero y enviamos
los mismos datos desde nuestro network service. +
El network service que se ocupa de estos intercambios de información para agendar contactos entre wallets
es el Network Service Crypto Addresses. +
