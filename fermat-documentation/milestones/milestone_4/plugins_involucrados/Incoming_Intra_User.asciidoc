= Incoming Intra User

== Nota

Se asume que el lector ha leido la documentación escrita aquí:

~/fermat/fermat-documentation/fermat_dmp/crypto_transaction/protocols/transactionTransferenceProtocol-v2.asciidoc

o tiene un conocimiento del protocolo de traspaso de transacciones del sistema.

== Documentación

Al recibir un pago desde un intra user tenemos que coordinar la información que llega a través de la
red crypto con la metadata de la transacción. El Crypto Router nos envía la información de las
transacciones crypto. Por otro lado, diversos network services especializados nos enviarán la
información de la metadata. +
Para este Milestone, esta metadata puede ser metadata de crypto (se da cuando un Intra User nos envía
una transacción crypto) o de fiat (se da cuando un Intra User nos envía una transacción de Fiat over
crypto). En ambos casos la metadata tiene adjunta el hash de la transacción que viaja por la red
crypto asociada a esta metadata. Usaremos este hash para detectar desde el lado del receptor que ambas
piezas de información han llegado a destino. +

Si detectamos la llegada de una transacción por la red crypto pero no tenemos la metadata entonces no
podemos aplicar la transacción dado que el plugin de la wallet de la capa basic wallet espera la metadata
para registrar sus datos. Nace aquí el problema de que tenemos que hacer un seguimiento del ciclo de
vida de la transacción de la red crypto (vista por la red, reversiones antes y después de entrar a un
bloque, etc.), detectar la metadata y actualizar los balances (book y available) de manera adecuada. +
Esto lleva a que, si bien podemos tomar parte de la estructura del Incoming Intra User para guiar este
plugin, debemos cambiar la lógica de funcionamiento del mismo. Comencemos estudiando la estructura de
agentes que podemos darle a este plugin. +

Tomando como base al Incoming Extra User necesitamos agregar un monitor agent por cada tipo de metadata.
Por ejemplo, un CryptoMonitorAgent y un FiatMonitorAgent para que traigan la metadata de las transacciones
crypto y fiat de los network services Crypto Transmission y Money Transmission respectivamente. +
Como la información contenida en la metadata que se trae cada tipo de transacción es diferente, tendremos
que guardar la información en tablas diferentes. Es decir, en nuestra base de datos tendremos una tabla
para guardar la metadata de las transacciones crypto y otra para la metadata de las transacciones fiat.
A estas dos tablas se le suman la de eventos y la de transacciones de la red crypto. +
Para cada monitor agent deberá haber un método que consulte la tabla de eventos trayendo el siguiente
evento pendientepoo para el agente particular que consulta; es decir que si consulta el CryptoMonitorAgent
entonces se le debe dar un evento con source Crypto Transmission Network Service; si consulta el
FiatMonitorAgent entonces se le debe dar un evento con source Money Transmission Network Service; y
si consulta el MonitorAgent entonces se le debe dar un evento con source Incoming Crypto.

Para administrar el ciclo de vida de la transacción sólo requerimos de la información que nos da la
red crypto a través del Incoming Crypto, la espera de la metadata es necesaria para poder aplicar las
actualizaciones del balance. +
Lo que haremos será que el método que llama el relay agent que consulta las transacciones en estado
(RESPONSIBLE, TO_BE_APPLIED), es decir el método getResponsibleTBATransactions, retornará sólo las
transacciones en ese estado que además tengan la metadata sincronizada. De esta manera el problema
queda reducido al problema que hemos resuelto en la lógica del Incoming Extra User. +

NOTE: Un posible defecto de esta estrategia nace si la comunicación entre network services requiere
que ambos usuarios esten conectados para intercambiar un mensaje. En principio asumiremos que no
tenemos este problema; pero si nuestro sistema de comunicación no nos garantiza que podamos enviar
un mensaje a un usuario desconectado para poder desentendernos de la responsabilidad de envío del
mismo entonces tendremos que analizar esta estrategia.
Dicho en otras palabras, nos basamos en que si un usuario A envía un mensaje a otro usuario B a través
de un network service N cuando B está desconectado, entonces si A se desconecta y luego B se conecta,
el mensaje enviado le llegará sin que A deba realizar ningún tipo de reenvío.

Para obtener la información eficientemente podemos colocar una tabla que relaciona la tabla que almacena
las transacciones crypto con el tipo de metadata que se detectó asociada a esa transacción. Visto con
más detalle, cuando llega un mensaje con metadata de una transacción fiat registramos en esta tabla el
campo (hash de la transacción crypto asociada, FIAT_TRANSACTION) y si llega una la metainformación de lo
que sería una transacción crypto entre intra users colocaremos un registro (hash de la transacción crypto
asociada, CRYPTO_TRANSACTION). Definiremos un enum TransactionType para representar estos valores. +
La manera de utilizar esta tabla será que cuando se piden las transacciones de las que uno es responsable
se consultará qué transacciones en estado (RESPONSIBLE, TO_BE_APPLIED) tinen su hash asociado en esta
tabla. +
Además requeriremos un método para saber si una transacción es FIAT_TRANSACTION o CRYPTO_TRANSACTION
(u otro tipo futuro) para que a la hora de aplicar las transacciones pidamos la metadata asociada y
podamos trabajarla. +

Como un agregado, este plugin deberá llamar a los métodos `informTransactionSeenByVault` e
`informTransactionCreditedInWallet` del network service MoneyTransmission cuando se trate
con una transacción fiat y Crypto Transmission cuando sea una transacción crypto. +
Se deben llamar en el momento adecuado, cuando procesemos una transacción en crypto estado
ON_CRYPTO_NETWORK llamaremos al método `informTransactionSeenByVault` y cuando procesemos una
en crypto estado ON_BLOCKCHAIN y actualicemos el Available Balance de la wallet llamaremos al
método `informTransactionCreditedInWallet`. Con procesar una transacción nos referimos al aplicar
cambios en los balances cuando esta tiene su metadata sincronizada. +


