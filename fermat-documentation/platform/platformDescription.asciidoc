[[PlatformDescription]]
= Platform Description

== Introduction 

In the following sections we will explore:

* The functional description of this system (what is Fermat? how can we use it?). 
* The <<PlatformDescription-Wallets,wallets>> and <<PlatformDescription-SubApps,applications>> that run over this platform.
* The <<PlatformDescription-SourceCode,code distribution and essentials concepts>> needed to. 

[[PlatformDescription-Wallets]]
== Wallets

:leveloffset: 2
include::wallets/bitcoinWallet.asciidoc[]

:leveloffset: 2
include::wallets/argentinaBitcoinWallet.asciidoc[]

:leveloffset: 2
include::wallets/bitcoinLossProtectedWallet.asciidoc[]

:leveloffset: 2
include::wallets/argentinaLossProtectedWallet.asciidoc[]

:leveloffset: 2
include::wallets/argentinaDiscountWallet.asciidoc[]

:leveloffset: 2
include::wallets/roundedWallet.asciidoc[]

:leveloffset: 2
include::wallets/argentinaMultiAccountWallet.asciidoc[]

:leveloffset: 2
include::wallets/argentinaBankNotesWallet.asciidoc[]

// Return to normal title levels.
:leveloffset: 0

[[PlatformDescription-SubApps]]
== Subapplications

It is important to mention that every subapp described here is divided in a user interface and a logic module. The application UI runs over the platform and the logic that control the app lives inside the platform. This means that for each subapplication we will find a plug-in in the <<Fermat-DMP-ModuleLayer,module layer>> that implements the behavior of the app.

:leveloffset: 2
include::subapps/shell.asciidoc[]

:leveloffset: 2
include::subapps/walletManager.asciidoc[]

:leveloffset: 2
include::subapps/walletFactory.asciidoc[]

:leveloffset: 2
include::subapps/walletPublisher.asciidoc[]

:leveloffset: 2
include::subapps/walletStore.asciidoc[]

:leveloffset: 2
include::subapps/walletEditor.asciidoc[]

:leveloffset: 2
include::subapps/walletLicensing.asciidoc[]

:leveloffset: 2
include::subapps/shopManager.asciidoc[]

:leveloffset: 2
include::subapps/shop.asciidoc[]

:leveloffset: 2
include::subapps/brand.asciidoc[]

:leveloffset: 2
include::subapps/retailer.asciidoc[]

:leveloffset: 2
include::subapps/cryptoBroker.asciidoc[]

:leveloffset: 2
include::subapps/topUpPoint.asciidoc[]

:leveloffset: 2
include::subapps/cashOutPoint.asciidoc[]

:leveloffset: 2
include::subapps/designer.asciidoc[]

:leveloffset: 2
include::subapps/developer.asciidoc[]

:leveloffset: 2
include::subapps/marketer.asciidoc[]

// Return to normal title levels.
:leveloffset: 0

[[PlatformDescription-SourceCode]]
== Source Code Distribution

Fermat Platform is divided in three main subsystems.

Fermat-PIP:: **P**lug-**i**ns **P**latform. Basic components that bring essential functionality to the platform. This components are in general independent of the functionality to be implemented above the system.
Fermat-P2P:: Brings the network infrastructure
Fermat-DMP:: **D**igital **M**oney **P**latform. This modules implement the tools for the <<PlatformDescription-SubApps,subapplications>>

Each of this subsystem is divided in layers. Inside the layers we can find plug-ins, each plug-in has a specific responsability. As a convention we call the plug-ins inside Fermat-PIP Addons instead of Plug-ins. +
Plug-ins need to identify themself in order to ask for resources to addons. This is a security and organizational decision that helps the system organization as a whole.

We can also identify outside these subsystems two main structures. One is what we call fermat-api and the other is fermat-core.

=== fermat-api

The modules inside each layer define the necessary interfaces to accomplish their duty inside the plug-ins. However, this interfaces bring many times too much information to the developer. This is why we define a group of reduces interfaces to export to other layers. This interfaces among other definitions can be found in this module called fermat-pip-api.+
Some other definitions are for example exceptions and enums.

=== fermat-core

This set of classes are the representation of the platform. The purpose of this modules is to initialize the whole system and to monitor the way the application is behaving. +

=== Initialization process

The most intuitive way to initialize the platform is by creating an instance of each layer and then of each plug-in inside.+
So the sequence could be:

 Platform -> Layer -> Plug-in

One problem with this approach is that if we develop a new version of a plug-in tha needs more resources than the previous one, then there may be some devices that won't be able to run the new version and would opt for the previous one. +
We would like that the platform could decide which version instantiate without the user having to indicate explicitly. +
This is why we defined a class named DeveloperBitDubai. The responsibility of this layer is to decide which version of a plug-in the platform should instantiate. Others developers will have there own Developer class to accomplish the same function.
 
The new initialization sequence would be:
 
 Platform -> Layer -> Developer -> Plug-in

This works fine as long as we stay as the only developer for a plug-in. We could imagine that in the future a new developer would like to create it's own version of an existing plug-in to offer to the platform. +
In this scenario we find again the problem we had for versions. Who decides which developer implementation we should select.
We created the PluginSubsystem class to solve this problem. The subsystem class instantiate the developer class and finally this developer class instantiate the version of the plug-in.
  
The final initialization sequence is therefore:
  
 Platform -> Layer -> Subsysyem -> Developer -> Plug-in

==== (END OF /fermat-documentations/platfomr/platformDescription.asciidoc)


