Documentación sobre los Test

La forma en la que estuve trabajando los Test con Jorge es la siguiente:

Configuración

Los Test se realizan con una serie de librerías las cuales deben ser configuradas en el archivo build.gradle del módulo en el que se vaya a trabajar, estas librerías y su configuración son las siguientes:

JUnit

Esta librería se encarga de establecer los marcadores para identificar y poder realizar los Test, marcadores tales como @Before y @Test, esta se configura en el archivo build.gradle agregando en las dependencias  la siguiente línea:

    testCompile group: 'junit', name: 'junit', version: '4.11'

Fest

Esta librería se encarga de las aserciones, las cuales realizan las validaciones de los Test, para configurarla se debe agregar en las dependencias la siguiente línea:

    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'

Googlecode

Esta se encarga del manejo de las excepciones en los Test, para configurarla se agrega en las dependencias la siguiente línea:

    testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'

RoboElectric (Módulos Android)

Esta librería se usa en los módulos con dependencias de Android, es decir, que usan “Apply plugin: ‘com.android.library’”, permite crear los dobles de pruebas, se configura agregando la siguiente línea en el área dependencias del módulo:

    testCompile 'org.robolectric:robolectric:3.0+'

En la sección de las dependencias del módulo debería quedar algo similar a esto, si es un módulo de Android :

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
        testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'
        testCompile 'org.robolectric:robolectric:3.0+'
    }

Mockito (Módulos Java) 

Esta librería se usa en los módulos con dependencias de Java, es decir, que usan “Apply plugin: ‘java”, permite crear los dobles de pruebas, se configura agregando la siguiente línea en el área dependencias del módulo:
    testCompile "org.mockito:mockito-core:1.9.5"

En la sección de las dependencias del módulo debería quedar algo similar a esto, si es un módulo de Java :

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
        testCompile group: 'com.googlecode.catch-exception', name: 'catch-exception', version: '1.2.0'
        testCompile "org.mockito:mockito-core:1.9.5"
    }

Jacoco

Este Plugin se encarga de generar el reporte de cobertura del proyecto, este requiere una configuración un poco más extendida que las anteriores, para configurarla se debe realizar lo siguiente:

En la parte de las importaciones, al inicio del archivo builod.gradle, agregamos la siguiente línea:

    apply plugin: 'jacoco'

Luego después de la sección de las dependencias, se agregan las siguientes líneas:

    def jacocoHtmlReport = ""

    jacocoTestReport{
        reports{
            jacocoHtmlReport = "Code Coverage HTML Report: file://" + html.destination + "/index.html"
        }
    }

    task testCoverage(dependsOn: jacocoTestReport) << {
        println jacocoHtmlReport
    }

    jacocoTestReport.dependsOn clean, test
    test.mustRunAfter clean
    jacocoTestReport.mustRunAfter test

Con estas líneas estamos, definiendo una variable que almacene la ruta en la cual se va a guardar el reporte HTML con la información de la cobertura.
	
    def jacocoHtmlReport = ""

Luego indicamos que al ejecutar la tarea jacocoTestReport, se debe asignar a la variable creada anteriormente la ruta donde se va a guardar el reporte.

    jacocoTestReport{
        reports{
            jacocoHtmlReport = "Code Coverage HTML Report: file://" + html.destination + "/index.html"
        }
    }

En el siguiente grupo de líneas creamos la tarea testCoverage que va a depender de la tarea jacocoTestReport, es decir, que testCoverage se va a ejecutar al terminar la tarea jacocoTestReport, en esta tarea que creamos simplemente imprimimos la variable que creamos al inicio.

    task testCoverage(dependsOn: jacocoTestReport) << {
        println jacocoHtmlReport
    }

Por último,  se colocan 3 líneas que: 

Limpian los reportes de los Test generados en ejecuciones anteriores.

    jacocoTestReport.dependsOn clean, test
	
Limpian los reportes de la cobertura generada en ejecuciones anteriores.

    test.mustRunAfter clean

Arranca el proceso para generar los nuevos reportes

    jacocoTestReport.mustRunAfter test

Estructura del código

Para una mejor lectura del código, se estableció que los Test se deben estructurar de la siguiente forma:
	
Desde la carpeta SRC, que contiene los archivos fuentes del proyecto, se debe crear un segundo hilo con la siguiente ruta:

    SRC/test/java/unit/com/…/miclaseTest

Donde los 3 puntos (…) se refieren a la ruta donde se encuentra la clase a testear, ejemplo:

Supóngase que se tiene una clase con la siguiente ruta y nombre:

    SRC/main/java/com/bitdubai/miclase.java

En el segundo hilo (EL de los Test), deberá tener la siguiente ruta

    SRC/test/java/unit/com/bitdubai/miclaseTest/

Nótese que la ruta termina en /, es decir, que “miclaseTest” en un package, dentro de este package se van a guardar todos los Test de esa clase (Uno por método a probar)

Volviendo al ejemplo, supongamos que el archivo miclase.java, tiene 2 métodos, suma() y resta(), entonces en el package miclaseTest, deberán haber 2 clases uno por método a probar con la siguiente nomenclatura en el nombre:

Cada Test debe tener el nombre del método que se va a Testear seguido de la palabra Test,  quedando el ejemplo anterior de la siguiente manera:

    SumaTest.java y RestaTest.java

De esta forma, si encontramos un Test llamado por ejemplo: CloseDatabaseTest.java dentro de un package llamado AndroidDatebase, se sobreentiende que es un Test que prueba el método closedatabase() de la clase AndroidDatabase.

Además de los nombres, se debe tener el mismo sistema de archivos para los Test que tiene el módulo que se está testeando, ejemplo:

Si se tiene un módulo con la siguiente estructura:

    SRC/main/java
        Clase_1
        Clase_2
            Clase_2.1
        Clase_3

Se debe tener la misma estructura en el directorio de los Test:

    SRC/test/java/unit
        Clase_1Test/
        Clase_2Test/
            Clase_2.1Test/
        Clase_3Test/


Forma de realizar el Test

Para realizar los test, se debe seguir la siguiente estructura:

    Importaciones
        Clase
            Declaración de variables
            Inicialización
            Test

Importación

Se realizan igual que en cualquier clase java import …

Declaración

La clase también se declara igual a cualquier clase a excepción de los Test donde se trabaje con RoboElectric o Mockito, en estos se debe agregar justo antes de la declaración de la clase las siguientes líneas:
Si se trabaja con RoboElectric:

    @RunWith(RobolectricGradleTestRunner.class)
    @Config(constants = BuildConfig.class)
	
Si se trabaja con Mockito:

    @RunWith(MockitoJUnitRunner.class)

Un ejemplo de declaración usando RoboElectric:

    @RunWith(RobolectricGradleTestRunner.class)
    @Config(constants = BuildConfig.class)
    public class MiMetodoTest {
        …
    }


Un ejemplo de declaración usando Mockito:

    @RunWith(MockitoJUnitRunner.class)
    public class MiMetodoTest {
        …
    }

Inicialización

Para que JUnit sepa que debe realizar una acción previa a los Test, como inicializar una variable, se debe usar el marcador **@Before** antes del método que realiza la acción, ejemplo:

    public class MiMetodoTest {
        private String variable;

        @Before
        public InicializaVariable(){
            variable = “Hola”;
        }
        …
    }

De esta forma JUnit sabe que debe ejecutar el método InicializaVariable() antes de realizar cualquier Test.

Test

Para indicar que se debe realizar un Test, se usa el marcador **@Test**, funciona igual que @Before solo que ahora indica que el método que precede es un Test, siguiendo el ejemplo anterior:

    public class MiMetodoTest {
        private String variable;

        @Before
        public InicializaVariable(){
            variable = “Hola”;
        }
        @Test
        public SumasIgualesTest(){
            …
        }
    }

Aserciones

Las aserciones son los llamados que realizan el Test en sí estos se realizan usando la librería **Fest** y se realizan usando el método static **assertThat**, este método permite realizar una gran variedad de comparaciones que nos permiten saber si un método responde como debe hacerlo, la forma de usar este método es la siguiente:

    Ejemplo:

        public class SumaTest {
            private Calculadora variable;

            @Before
            public InicializaVariable(){
                variable = Calculadora();
            }

            @Test
            public SumasIgualesTest(){
                assertThat(variable.Suma(2, 3)).isEqualTo(5);
            }

            @Test
            public SumasDiferentesTest(){
                assertThat(variable.Suma(4, 6)).isNotEqualTo(5);
            }
        }

En el ejemplo tenemos 2 Test, el primero comprueba que al método Suma al recibir los valores 2 y 3 respectivamente, devuelva 5, es decir, 2+3=5

Mientras que el segundo método comprueba que el método Suma al recibir los valores 4 y 6, no devuelva nuevamente 5.

Mockito WHEN

Para simular el funcionamiento del método de un objeto Mockeado se usa el método estático *WHEN*, con este podemos indicar como debe actuar el Mock cuando se realize el llamado de dicho método.

Ejemplo de uso:

        public class Calculadora {
            public dividir(float x, float y){
                if(!es_cero(float valor)){
                    return x/y;
                }
                return 0;
            }
            
            public es_cero(float valor){
                if(valor == 0){
                    return true;
                }else{
                    return false;
                }
            }
        }

        public class DivisorTest {
            private Calculadora variable;

            @Before
            public InicializaVariable(){
                variable = Calculadora();
                WHEN(variable.es_cero(0))thenReturn(0);
            }

            @Test
            public DivisionPorCero(){
                assertThat(variable.dividir(4, 0)).isEqualTo(0);
            }
        }

