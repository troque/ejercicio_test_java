= Unit Testing

Todos los modulos deben contener un conjunto de pruebas unitarias (**Unit Tests**) que nos permitan verificar el funcionamiento de bajo nivel del sistema.

De esta forma, independientemente de si el modulo es un plugin o addon, debemos estar en capacidad de siempre ejecutar la tarea

```
  gradle test
```

Desde cualquier modulo del sistema y obtener una ejecucion exitosa.

*El objetivo de las pruebas es validar todas las rutas controlables de ejecucion de los metodos publicos que se implementan en las clases del modulo*

== Consideraciones Generales

* El objetivo de las pruebas es validar todas las rutas controlables de ejecucion de los metodos publicos que se implementan en las clases del modulo
* Se debe hacer un **Test Suite** (*package*) por clase a probar
* Se debe crear una clase de prueba por metodo publico a probar
* Se debe testear el **PluginRoot**
* Se debe testear los metodos *start()* y *stop()* de los agentes y servicios implementados
* Se debe medir la cobertura de codigo con alguna herramienta
** La cobertura minima a alcanzarse debe ser un 50% del proyecto

=== Ejecucion de las Pruebas

* Si un metodo declara que puede disparar una o mas excepciones, es necesario comprobar que esas excepciones sean disparadas segun los escenarios en los que esperamos que sean disparadas.
* Si un metodo declara que devuelve un valor si la ejecucion es exitosa, es necesario probar el retorno de un valor de pruebas
* Si un metodo no devuelve valores pero altera el valor de un miembro de la clase, es necesario comprobar el cambio de ese valor
* Si un metodo no devuelve valores y no tiene un cambio de valores comprobable, debe comprobarse su ejecucion sin excepciones.

=== Interaccion con Interfaces

* Se debe utilizar *Dobles de Prueba* (_mocks_) cuando sea necesario utilizar objetos obtenidos desde otros modulos a traves de interfaces
** Se puede utilizar elementos creados con un Framework de pruebas como *Mockito*
** Se puede crear implementaciones de la interfaz con valores de prueba.
* Se debe verificar que el doble de prueba se comporte como se espera para obtener el resultado de la prueba en cuestion

== Consideraciones del Entorno de Desarrollo

=== Configuracion Basica para las Pruebas

El minimo requerido para la ejecucion de pruebas unitarias en un proyecto Java es configurar en el archivo **build.gradle** la siguiente dependencia

```
dependencies {
  //... other dependencies
  testCompile 'junit:junit:4.11'
}
```

### Tareas Gradle

Todo los modulos poseen una tarea gradle llamada **test** que puede ser invocada desde la consola de la siguiente forma

```bash
gradle test
```

El resultado de la ejecucion de las pruebas, incluido los mensajes que sean enviados por *System.out* y *System.err* pueden ser revisados en la ruta *build/reports/tests/index.html*

Cabe destacar que la tarea **check** depende de **tests** por lo que forma parte de su ejecucion.

**NOTA:** En el caso de los proyectos Android, la tarea **test** invoca a su vez las tareas **testDebug** y **testRelease**, ya que es posible determinar que pruebas especificas se ejecutaran para los dos tipos de *Builds* disponibles por defecto; por ahora no hemos delineado una estrategia para diferenciar que pruebas deben ser de *Release* o de *Debug*.


### Generacion de Dobles de Prueba

Para incorporar dobles de pruebas (*mocks*) automatizados existen tres herramientas de amplio uso en los entornos de desarrollo Java

* **[Mockito](http://mockito.org/)**
```groovy
dependencies {
  //... other dependencies
  testCompile 'org.mockito:mockito-all:2.0.2-beta'
}
```
* **[JMock](http://www.jmock.org/)**
```groovy
dependencies {
  //... other dependencies
  testCompile 'jmock:jmock:1.2.0'
}
```
* **[EasyMock](http://easymock.org/)**
```groovy
dependencies {
  //... other dependencies
  'org.easymock:easymock:3.3.1'
}
```

El programador esta en libertad de escoger aquella con la que se sienta comodo y/o tenga experiencia previa; dicho esto, no debemos mezclar en un proyecto diferentes entornos de pruebas, es decir, si en un modulo cualquiera se ha seleccionado **JMock** como generador de *mocks*, todas las pruebas de dicho modulo que involucren *mocks* automatizados deben utilizar esta libreria.

**NOTA:** Existen librerias que incluyen paquetes de *mocking* como parte de su funcionamiento, por ejemplo la libreria **CatchException** incluye a **Mockito** en su version 1.9

### Cobertura de Codigo

Android Developer Studio incluye un set de herramientas automatizadas para la medicion de cobertura, pero a nivel de mas bajo nivel existe un plugin de gradle llamado JaCoCo que incorpora soporte a la medicion de cobertura al momento de ejecucion de las pruebas y que permite la creacion de un informe detallado de la cobertura de ejecucion.

Para habilitar dicho plugin solo es necesario agregar a nuestro **build.gradle** la siguiente instruccion
```groovy
apply plugin: 'jacoco'
```

Esto agregara un agente de medicion que corre dentro de la tarea **test** el cual recolecta toda la informacion necesaria para la creacion de los reportes de cobertura. La manera mas correcta para su invocacion por defecto es la siguiente
```bash
gradle clean test jacocoTestReport
```

De esta forma garantizamos que las pruebas se limpie lo que se localiza dentro del directorio *build/* y las pruebas sean ejecutadas con la instrumentacion para luego generar el reporte HTML.

La ruta por defecto del reporte de cobertura generado por JaCoCo es *build/reports/jacoco/test/html/index.html*, aunque esta puede ser modificada en la configuracion del **build.gradle**

#### Simplificacion de Ejecucion del jacocoTestReport

Es posible utilizar un poco de configuracion de las tareas **Gradle** para que la invocacion a **jacocoTestReport** sea inclusiva de las tareas anteriormente descritas e inclusive forzar el orden de su ejecucion para garantizar la formacion correcta de los reportes.

Es necesario incluir en el **build.gradle** las siguientes instrucciones
```groovy
jacocoTestReport.dependsOn clean, test
test.mustRunAfter clean
jacocoTestReport.mustRunAfter test
```

De esta manera podemos ejecutar las tres tareas al invocar desde la consola
```bash
gradle jacocoTestReport
```